/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.9-dev at Wed Mar 15 21:40:53 2017. */

#ifndef PB_SND_MSGS_COMMMSGS_PB_H_INCLUDED
#define PB_SND_MSGS_COMMMSGS_PB_H_INCLUDED
#include <pb.h>

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _snd_msgs_Log_eLogLevel {
    snd_msgs_Log_eLogLevel_DEBUG = 0,
    snd_msgs_Log_eLogLevel_INFO = 1,
    snd_msgs_Log_eLogLevel_WARN = 2,
    snd_msgs_Log_eLogLevel_ERROR = 3,
    snd_msgs_Log_eLogLevel_FATAL = 4
} snd_msgs_Log_eLogLevel;
#define _snd_msgs_Log_eLogLevel_MIN snd_msgs_Log_eLogLevel_DEBUG
#define _snd_msgs_Log_eLogLevel_MAX snd_msgs_Log_eLogLevel_FATAL
#define _snd_msgs_Log_eLogLevel_ARRAYSIZE ((snd_msgs_Log_eLogLevel)(snd_msgs_Log_eLogLevel_FATAL+1))

/* Struct definitions */
typedef struct _snd_msgs_EmptyMsg {
    char dummy_field;
/* @@protoc_insertion_point(struct:snd_msgs_EmptyMsg) */
} snd_msgs_EmptyMsg;

typedef struct _snd_msgs_Encoders {
    int32_t left;
    int32_t right;
/* @@protoc_insertion_point(struct:snd_msgs_Encoders) */
} snd_msgs_Encoders;

typedef struct _snd_msgs_Ir {
    bool left;
    bool center;
    bool right;
/* @@protoc_insertion_point(struct:snd_msgs_Ir) */
} snd_msgs_Ir;

typedef struct _snd_msgs_Log {
    uint32_t stamp;
    snd_msgs_Log_eLogLevel level;
    pb_callback_t text;
/* @@protoc_insertion_point(struct:snd_msgs_Log) */
} snd_msgs_Log;

typedef struct _snd_msgs_PidTunings {
    float p;
    float i;
    float d;
/* @@protoc_insertion_point(struct:snd_msgs_PidTunings) */
} snd_msgs_PidTunings;

typedef struct _snd_msgs_Point {
    float x;
    float y;
/* @@protoc_insertion_point(struct:snd_msgs_Point) */
} snd_msgs_Point;

typedef struct _snd_msgs_Pose {
    float x;
    float y;
    float th;
/* @@protoc_insertion_point(struct:snd_msgs_Pose) */
} snd_msgs_Pose;

typedef struct _snd_msgs_Speed {
    float left;
    float right;
/* @@protoc_insertion_point(struct:snd_msgs_Speed) */
} snd_msgs_Speed;

typedef struct _snd_msgs_SerialRequest {
    pb_size_t which_type;
    union {
        snd_msgs_EmptyMsg getStatus;
        snd_msgs_EmptyMsg getEncoders;
        snd_msgs_EmptyMsg getPosition;
        snd_msgs_EmptyMsg getMotorsSpeed;
        snd_msgs_EmptyMsg getPidSpeedLeft;
        snd_msgs_EmptyMsg getPidSpeedRight;
        snd_msgs_EmptyMsg getStarterState;
        snd_msgs_Speed setMotorsSpeed;
        snd_msgs_PidTunings setPidSpeedLeft;
        snd_msgs_PidTunings setPidSpeedRight;
        snd_msgs_Encoders setEncoders;
    } type;
/* @@protoc_insertion_point(struct:snd_msgs_SerialRequest) */
} snd_msgs_SerialRequest;

typedef struct _snd_msgs_Status {
    snd_msgs_Pose pose;
    snd_msgs_Speed speed;
    bool starter;
    bool estop;
    snd_msgs_Ir ir;
    snd_msgs_Encoders encoders;
/* @@protoc_insertion_point(struct:snd_msgs_Status) */
} snd_msgs_Status;

typedef struct _snd_msgs_SerialResponse {
    pb_size_t which_type;
    union {
        snd_msgs_Log log;
        snd_msgs_Encoders encoders;
        snd_msgs_Pose pose;
        snd_msgs_Speed speed;
        snd_msgs_PidTunings pidSpeedLeft;
        snd_msgs_PidTunings pidSpeedRight;
        bool isStarterSet;
        snd_msgs_Status status;
    } type;
/* @@protoc_insertion_point(struct:snd_msgs_SerialResponse) */
} snd_msgs_SerialResponse;

/* Default values for struct fields */
extern const snd_msgs_Log_eLogLevel snd_msgs_Log_level_default;

/* Initializer values for message structs */
#define snd_msgs_EmptyMsg_init_default           {0}
#define snd_msgs_Point_init_default              {0, 0}
#define snd_msgs_Pose_init_default               {0, 0, 0}
#define snd_msgs_Speed_init_default              {0, 0}
#define snd_msgs_Encoders_init_default           {0, 0}
#define snd_msgs_PidTunings_init_default         {0, 0, 0}
#define snd_msgs_Ir_init_default                 {0, 0, 0}
#define snd_msgs_Status_init_default             {snd_msgs_Pose_init_default, snd_msgs_Speed_init_default, 0, 0, snd_msgs_Ir_init_default, snd_msgs_Encoders_init_default}
#define snd_msgs_Log_init_default                {0, snd_msgs_Log_eLogLevel_INFO, {{NULL}, NULL}}
#define snd_msgs_SerialRequest_init_default      {0, {snd_msgs_EmptyMsg_init_default}}
#define snd_msgs_SerialResponse_init_default     {0, {snd_msgs_Log_init_default}}
#define snd_msgs_EmptyMsg_init_zero              {0}
#define snd_msgs_Point_init_zero                 {0, 0}
#define snd_msgs_Pose_init_zero                  {0, 0, 0}
#define snd_msgs_Speed_init_zero                 {0, 0}
#define snd_msgs_Encoders_init_zero              {0, 0}
#define snd_msgs_PidTunings_init_zero            {0, 0, 0}
#define snd_msgs_Ir_init_zero                    {0, 0, 0}
#define snd_msgs_Status_init_zero                {snd_msgs_Pose_init_zero, snd_msgs_Speed_init_zero, 0, 0, snd_msgs_Ir_init_zero, snd_msgs_Encoders_init_zero}
#define snd_msgs_Log_init_zero                   {0, (snd_msgs_Log_eLogLevel)0, {{NULL}, NULL}}
#define snd_msgs_SerialRequest_init_zero         {0, {snd_msgs_EmptyMsg_init_zero}}
#define snd_msgs_SerialResponse_init_zero        {0, {snd_msgs_Log_init_zero}}

/* Field tags (for use in manual encoding/decoding) */
#define snd_msgs_Encoders_left_tag               1
#define snd_msgs_Encoders_right_tag              2
#define snd_msgs_Ir_left_tag                     1
#define snd_msgs_Ir_center_tag                   2
#define snd_msgs_Ir_right_tag                    3
#define snd_msgs_Log_stamp_tag                   1
#define snd_msgs_Log_level_tag                   2
#define snd_msgs_Log_text_tag                    3
#define snd_msgs_PidTunings_p_tag                1
#define snd_msgs_PidTunings_i_tag                2
#define snd_msgs_PidTunings_d_tag                3
#define snd_msgs_Point_x_tag                     1
#define snd_msgs_Point_y_tag                     2
#define snd_msgs_Pose_x_tag                      1
#define snd_msgs_Pose_y_tag                      2
#define snd_msgs_Pose_th_tag                     3
#define snd_msgs_Speed_left_tag                  1
#define snd_msgs_Speed_right_tag                 2
#define snd_msgs_SerialRequest_getStatus_tag     1
#define snd_msgs_SerialRequest_getEncoders_tag   2
#define snd_msgs_SerialRequest_getPosition_tag   3
#define snd_msgs_SerialRequest_getMotorsSpeed_tag 4
#define snd_msgs_SerialRequest_getPidSpeedLeft_tag 5
#define snd_msgs_SerialRequest_getPidSpeedRight_tag 6
#define snd_msgs_SerialRequest_getStarterState_tag 7
#define snd_msgs_SerialRequest_setMotorsSpeed_tag 10
#define snd_msgs_SerialRequest_setPidSpeedLeft_tag 11
#define snd_msgs_SerialRequest_setPidSpeedRight_tag 12
#define snd_msgs_SerialRequest_setEncoders_tag   13
#define snd_msgs_Status_pose_tag                 1
#define snd_msgs_Status_speed_tag                2
#define snd_msgs_Status_starter_tag              3
#define snd_msgs_Status_estop_tag                4
#define snd_msgs_Status_ir_tag                   5
#define snd_msgs_Status_encoders_tag             6
#define snd_msgs_SerialResponse_log_tag          1
#define snd_msgs_SerialResponse_encoders_tag     2
#define snd_msgs_SerialResponse_pose_tag         3
#define snd_msgs_SerialResponse_speed_tag        4
#define snd_msgs_SerialResponse_pidSpeedLeft_tag 5
#define snd_msgs_SerialResponse_pidSpeedRight_tag 6
#define snd_msgs_SerialResponse_isStarterSet_tag 7
#define snd_msgs_SerialResponse_status_tag       8

/* Struct field encoding specification for nanopb */
extern const pb_field_t snd_msgs_EmptyMsg_fields[1];
extern const pb_field_t snd_msgs_Point_fields[3];
extern const pb_field_t snd_msgs_Pose_fields[4];
extern const pb_field_t snd_msgs_Speed_fields[3];
extern const pb_field_t snd_msgs_Encoders_fields[3];
extern const pb_field_t snd_msgs_PidTunings_fields[4];
extern const pb_field_t snd_msgs_Ir_fields[4];
extern const pb_field_t snd_msgs_Status_fields[7];
extern const pb_field_t snd_msgs_Log_fields[4];
extern const pb_field_t snd_msgs_SerialRequest_fields[12];
extern const pb_field_t snd_msgs_SerialResponse_fields[9];

/* Maximum encoded size of messages (where known) */
#define snd_msgs_EmptyMsg_size                   0
#define snd_msgs_Point_size                      10
#define snd_msgs_Pose_size                       15
#define snd_msgs_Speed_size                      10
#define snd_msgs_Encoders_size                   22
#define snd_msgs_PidTunings_size                 15
#define snd_msgs_Ir_size                         6
#define snd_msgs_Status_size                     65
/* snd_msgs_Log_size depends on runtime parameters */
#define snd_msgs_SerialRequest_size              24
/* snd_msgs_SerialResponse_size depends on runtime parameters */

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define COMMMSGS_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
