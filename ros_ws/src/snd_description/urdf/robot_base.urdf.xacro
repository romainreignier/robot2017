<?xml version="1.0"?>
<robot xmlns:xacro="http://www.ros.org/wiki/xacro" name="snd_robot">
    <xacro:include filename="$(find snd_description)/urdf/macros.xacro"/>

    <xacro:property name="motor_wheel_radius" value="0.0355"/>
    <xacro:property name="motor_wheel_width" value="0.011"/>
    <xacro:property name="motor_wheel_separation" value="0.195"/>
    <xacro:property name="encoders_wheel_radius" value="0.026"/>
    <xacro:property name="encoders_wheel_width" value="0.03"/>
    <xacro:property name="encoders_wheel_separation" value="0.995"/>
    <xacro:property name="body_length" value="0.106"/>
    <xacro:property name="body_width" value="0.1415"/>
    <xacro:property name="body_height" value="0.08878"/>
    <!-- distance between floor and base of robot body -->
    <xacro:property name="robot_clearance" value="0.010"/>
    <xacro:property name="robot_weight" value="1.0"/>
    <xacro:property name="caster_radius" value="0.005"/>

    <material name="dark_grey">
        <color rgba="0.2 0.2 0.2 1"/>
    </material>
    <material name="light_grey">
        <color rgba="0.8 0.8 0.8 0.8"/>
    </material>
    <material name="beige">
        <color rgba="0.76 0.76 0.7 1.0"/>
    </material>
    <material name="blue">
        <color rgba="0.0 0.0 0.7 1.0"/>
    </material>

    <!--gazebo>
        <plugin name="gazebo_ros_control" filename="libgazebo_ros_control.so">
            <robotNamespace>/</robotNamespace>
        </plugin>
    </gazebo-->

    <xacro:macro name="robot_body">
        <link name="base_link"></link>

        <link name="robot_body">
            <!--visual>
                <orign xyz="0 0 0" rpy="0 0 0"/>
                <geometry>
                    <box size="${body_length} ${body_width} ${body_height}"/>
                </geometry>
                <material name="dark_grey"/>
            </visual-->
            <visual>
                <origin xyz="0 0 -0.01" rpy="0 0 -${pi/2}"/>
                <geometry>
                    <mesh filename="package://snd_description/meshes/robot_base_simple.stl" scale="0.001 0.001 0.001"/>
                </geometry>
                <material name="dark_grey"/>
            </visual>
            <collision>
                <orign xyz="0 0 0" rpy="0 0 0"/>
                <geometry>
                    <box size="${body_length} ${body_width} ${body_height}"/>
                </geometry>
            </collision>
            <inertial>
                <orign xyz="0 0 0" rpy="0 0 0"/>
                <mass value="${robot_weight}"/>
                <xacro:box_inertia m="${robot_weight}" x="${body_length}" y="${body_width}" z="${body_height}"/>
            </inertial>
        </link>
        <joint name="base_to_body" type="fixed">
            <parent link="base_link"/>
            <child link="robot_body"/>
            <origin xyz="0 0 ${robot_clearance}" rpy="0 0 0"/>
        </joint>

        <xacro:macro name="wheel" params="prefix ypos dir">
            <link name="${prefix}_wheel">
                <!--visual>
                    <origin xyz="0 0 0" rpy="0 ${pi/2} 0"/>
                    <geometry>
                        <cylinder length="${motor_wheel_width}" radius="${motor_wheel_radius}"/>
                    </geometry>
                    <material name="blue"/>
                </visual-->
                <visual>
                    <origin xyz="0 0 0" rpy="0 0 0"/>
                    <geometry>
                        <mesh filename="package://snd_description/meshes/motor_wheel_simple.stl" scale="0.001 0.001 0.001"/>
                    </geometry>
                    <material name="blue"/>
                </visual>
                <collision>
                    <origin xyz="0 0 0" rpy="0 ${pi/2} 0"/>
                    <geometry>
                        <cylinder length="${motor_wheel_width}" radius="${motor_wheel_radius}"/>
                    </geometry>
                </collision>
                <inertial>
                    <origin xyz="0 0 0" rpy="0 ${pi/2} 0"/>
                    <mass value="0.05"/>
                    <xacro:cylinder_inertia m="0.2" r="${motor_wheel_radius}" h="${motor_wheel_width}"/>
                </inertial>
            </link>
            <joint name="${prefix}_wheel_joint" type="continuous">
                <parent link="base_link"/>
                <child link="${prefix}_wheel"/>
                <origin xyz="0 ${ypos} ${motor_wheel_radius}" rpy="0 0 ${dir * pi/2}"/>
                <axis xyz="${dir} 0 0"/>
            </joint>
            <transmission name="${prefix}_wheel_trans">
                <type>transmission_interface/SimpleTransmission</type>
                <joint name="${prefix}_wheel_joint">
                    <hardwareInterface>VelocityJointInterface</hardwareInterface>
                </joint>
                <actuator name="${prefix}_wheel_actuator">
                    <mechanicalReduction>1</mechanicalReduction>
                </actuator>
            </transmission>

            <gazebo reference="${prefix}_wheel">
                <mu1 value="1.0"/>
                <mu2 value="1.0"/>
            </gazebo>
        </xacro:macro>
        <xacro:wheel prefix="left"  ypos="${motor_wheel_separation / 2.0}" dir="1"/>
        <xacro:wheel prefix="right" ypos="-${motor_wheel_separation / 2.0}" dir="-1"/>

        <!--xacro:macro name="caster" params="prefix position">
            <link name="${prefix}_caster">
                <visual>
                    <origin xyz="0 0 0" rpy="0 0 0"/>
                    <geometry>
                        <sphere radius="${caster_radius}"/>
                    </geometry>
                    <material name="dark_grey"/>
                </visual>
                <collision>
                    <origin xyz="0 0 0" rpy="0 0 0"/>
                    <geometry>
                        <sphere radius="${caster_radius}"/>
                    </geometry>
                </collision>
                <inertial>
                    <origin xyz="0 0 0" rpy="0 0 0"/>
                    <mass value="0.05"/>
                    <xacro:sphere_inertia m="0.05" r="${caster_radius}"/>
                </inertial>
            </link>
            <joint name="base_to_${prefix}_caster" type="fixed">
                <parent link="robot_up_plate"/>
                <child link="${prefix}_caster"/>
                <origin xyz="${position}" rpy="0 0 0"/>
            </joint>
            <gazebo reference="${prefix}_caster">
                <mu1 value="0.0"/>
                <mu2 value="0.0"/>
            </gazebo>
        </xacro:macro>
        <xacro:caster prefix="left" position="${body_length / 2.0 - 0.05} 0.16 -${body_height + caster_radius}"/>
        <xacro:caster prefix="right" position="${body_length / 2.0 - 0.05} -0.16 -${body_height + caster_radius}"/-->

        <gazebo>
            <plugin name="differential_drive_controller" filename="libgazebo_ros_diff_drive.so">
                <alwaysOn>true</alwaysOn>
                <updateRate>20</updateRate>
                <leftJoint>left_wheel_joint</leftJoint>
                <rightJoint>right_wheel_joint</rightJoint>
                <wheelSeparation>${197 - motor_wheel_width}</wheelSeparation>
                <wheelDiameter>${2.0 * motor_wheel_radius}</wheelDiameter>
                <torque>20</torque>
                <commandTopic>cmd_vel</commandTopic>
                <odometryTopic>odom</odometryTopic>
                <odometryFrame>odom</odometryFrame>
                <robotBaseFrame>base_link</robotBaseFrame>
                <legacyMode>false</legacyMode>
                <publishWheelTF>true</publishWheelTF>
            </plugin>
        </gazebo>
    </xacro:macro>
</robot>
