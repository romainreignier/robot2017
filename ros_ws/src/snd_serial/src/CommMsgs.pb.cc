// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CommMsgs.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CommMsgs.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace snd_msgs {
class EmptyMsgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<EmptyMsg> {
} _EmptyMsg_default_instance_;
class PointDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Point> {
} _Point_default_instance_;
class PoseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Pose> {
} _Pose_default_instance_;
class SpeedDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Speed> {
} _Speed_default_instance_;
class EncodersDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Encoders> {
} _Encoders_default_instance_;
class PidTuningsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PidTunings> {
} _PidTunings_default_instance_;
class IrDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Ir> {
} _Ir_default_instance_;
class StatusDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Status> {
} _Status_default_instance_;
class LogDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Log> {
} _Log_default_instance_;
class SerialRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SerialRequest> {
  public:
  const ::snd_msgs::EmptyMsg* getstatus_;
  const ::snd_msgs::EmptyMsg* getencoders_;
  const ::snd_msgs::EmptyMsg* getposition_;
  const ::snd_msgs::EmptyMsg* getmotorsspeed_;
  const ::snd_msgs::EmptyMsg* getpidspeedleft_;
  const ::snd_msgs::EmptyMsg* getpidspeedright_;
  const ::snd_msgs::EmptyMsg* getstarterstate_;
  const ::snd_msgs::Speed* setmotorsspeed_;
  const ::snd_msgs::PidTunings* setpidspeedleft_;
  const ::snd_msgs::PidTunings* setpidspeedright_;
  const ::snd_msgs::Encoders* setencoders_;
} _SerialRequest_default_instance_;
class SerialResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SerialResponse> {
  public:
  const ::snd_msgs::Log* log_;
  const ::snd_msgs::Encoders* encoders_;
  const ::snd_msgs::Pose* pose_;
  const ::snd_msgs::Speed* speed_;
  const ::snd_msgs::PidTunings* pidspeedleft_;
  const ::snd_msgs::PidTunings* pidspeedright_;
  bool isstarterset_;
  const ::snd_msgs::Status* status_;
} _SerialResponse_default_instance_;

namespace protobuf_CommMsgs_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[11];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmptyMsg, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmptyMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, y_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose, th_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Speed, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Speed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Speed, left_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Speed, right_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Encoders, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Encoders, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Encoders, left_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Encoders, right_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PidTunings, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PidTunings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PidTunings, p_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PidTunings, i_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PidTunings, d_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ir, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ir, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ir, left_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ir, center_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ir, right_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, pose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, starter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, estop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, ir_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, encoders_),
  0,
  1,
  4,
  5,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Log, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Log, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Log, stamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Log, level_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Log, text_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerialRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerialRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerialRequest, _oneof_case_[0]),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_SerialRequest_default_instance_), getstatus_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_SerialRequest_default_instance_), getencoders_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_SerialRequest_default_instance_), getposition_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_SerialRequest_default_instance_), getmotorsspeed_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_SerialRequest_default_instance_), getpidspeedleft_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_SerialRequest_default_instance_), getpidspeedright_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_SerialRequest_default_instance_), getstarterstate_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_SerialRequest_default_instance_), setmotorsspeed_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_SerialRequest_default_instance_), setpidspeedleft_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_SerialRequest_default_instance_), setpidspeedright_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_SerialRequest_default_instance_), setencoders_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerialRequest, type_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerialResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerialResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerialResponse, _oneof_case_[0]),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_SerialResponse_default_instance_), log_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_SerialResponse_default_instance_), encoders_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_SerialResponse_default_instance_), pose_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_SerialResponse_default_instance_), speed_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_SerialResponse_default_instance_), pidspeedleft_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_SerialResponse_default_instance_), pidspeedright_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_SerialResponse_default_instance_), isstarterset_),
  PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET((&_SerialResponse_default_instance_), status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SerialResponse, type_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 4, sizeof(EmptyMsg)},
  { 4, 10, sizeof(Point)},
  { 12, 19, sizeof(Pose)},
  { 22, 28, sizeof(Speed)},
  { 30, 36, sizeof(Encoders)},
  { 38, 45, sizeof(PidTunings)},
  { 48, 55, sizeof(Ir)},
  { 58, 68, sizeof(Status)},
  { 74, 81, sizeof(Log)},
  { 84, 100, sizeof(SerialRequest)},
  { 111, 124, sizeof(SerialResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_EmptyMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Point_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Pose_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Speed_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Encoders_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PidTunings_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Ir_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Status_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Log_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SerialRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SerialResponse_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "CommMsgs.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 11);
}

}  // namespace

void TableStruct::Shutdown() {
  _EmptyMsg_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Point_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _Pose_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _Speed_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _Encoders_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _PidTunings_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _Ir_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _Status_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _Log_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _SerialRequest_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _SerialResponse_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _EmptyMsg_default_instance_.DefaultConstruct();
  _Point_default_instance_.DefaultConstruct();
  _Pose_default_instance_.DefaultConstruct();
  _Speed_default_instance_.DefaultConstruct();
  _Encoders_default_instance_.DefaultConstruct();
  _PidTunings_default_instance_.DefaultConstruct();
  _Ir_default_instance_.DefaultConstruct();
  _Status_default_instance_.DefaultConstruct();
  _Log_default_instance_.DefaultConstruct();
  _SerialRequest_default_instance_.DefaultConstruct();
  _SerialResponse_default_instance_.DefaultConstruct();
  _Status_default_instance_.get_mutable()->pose_ = const_cast< ::snd_msgs::Pose*>(
      ::snd_msgs::Pose::internal_default_instance());
  _Status_default_instance_.get_mutable()->speed_ = const_cast< ::snd_msgs::Speed*>(
      ::snd_msgs::Speed::internal_default_instance());
  _Status_default_instance_.get_mutable()->ir_ = const_cast< ::snd_msgs::Ir*>(
      ::snd_msgs::Ir::internal_default_instance());
  _Status_default_instance_.get_mutable()->encoders_ = const_cast< ::snd_msgs::Encoders*>(
      ::snd_msgs::Encoders::internal_default_instance());
  _SerialRequest_default_instance_.getstatus_ = const_cast< ::snd_msgs::EmptyMsg*>(
      ::snd_msgs::EmptyMsg::internal_default_instance());
  _SerialRequest_default_instance_.getencoders_ = const_cast< ::snd_msgs::EmptyMsg*>(
      ::snd_msgs::EmptyMsg::internal_default_instance());
  _SerialRequest_default_instance_.getposition_ = const_cast< ::snd_msgs::EmptyMsg*>(
      ::snd_msgs::EmptyMsg::internal_default_instance());
  _SerialRequest_default_instance_.getmotorsspeed_ = const_cast< ::snd_msgs::EmptyMsg*>(
      ::snd_msgs::EmptyMsg::internal_default_instance());
  _SerialRequest_default_instance_.getpidspeedleft_ = const_cast< ::snd_msgs::EmptyMsg*>(
      ::snd_msgs::EmptyMsg::internal_default_instance());
  _SerialRequest_default_instance_.getpidspeedright_ = const_cast< ::snd_msgs::EmptyMsg*>(
      ::snd_msgs::EmptyMsg::internal_default_instance());
  _SerialRequest_default_instance_.getstarterstate_ = const_cast< ::snd_msgs::EmptyMsg*>(
      ::snd_msgs::EmptyMsg::internal_default_instance());
  _SerialRequest_default_instance_.setmotorsspeed_ = const_cast< ::snd_msgs::Speed*>(
      ::snd_msgs::Speed::internal_default_instance());
  _SerialRequest_default_instance_.setpidspeedleft_ = const_cast< ::snd_msgs::PidTunings*>(
      ::snd_msgs::PidTunings::internal_default_instance());
  _SerialRequest_default_instance_.setpidspeedright_ = const_cast< ::snd_msgs::PidTunings*>(
      ::snd_msgs::PidTunings::internal_default_instance());
  _SerialRequest_default_instance_.setencoders_ = const_cast< ::snd_msgs::Encoders*>(
      ::snd_msgs::Encoders::internal_default_instance());
  _SerialResponse_default_instance_.log_ = const_cast< ::snd_msgs::Log*>(
      ::snd_msgs::Log::internal_default_instance());
  _SerialResponse_default_instance_.encoders_ = const_cast< ::snd_msgs::Encoders*>(
      ::snd_msgs::Encoders::internal_default_instance());
  _SerialResponse_default_instance_.pose_ = const_cast< ::snd_msgs::Pose*>(
      ::snd_msgs::Pose::internal_default_instance());
  _SerialResponse_default_instance_.speed_ = const_cast< ::snd_msgs::Speed*>(
      ::snd_msgs::Speed::internal_default_instance());
  _SerialResponse_default_instance_.pidspeedleft_ = const_cast< ::snd_msgs::PidTunings*>(
      ::snd_msgs::PidTunings::internal_default_instance());
  _SerialResponse_default_instance_.pidspeedright_ = const_cast< ::snd_msgs::PidTunings*>(
      ::snd_msgs::PidTunings::internal_default_instance());
  _SerialResponse_default_instance_.isstarterset_ = false;
  _SerialResponse_default_instance_.status_ = const_cast< ::snd_msgs::Status*>(
      ::snd_msgs::Status::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\016CommMsgs.proto\022\010snd_msgs\"\n\n\010EmptyMsg\"\035"
      "\n\005Point\022\t\n\001x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\"(\n\004Pose\022\t\n"
      "\001x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\022\n\n\002th\030\003 \002(\002\"$\n\005Speed"
      "\022\014\n\004left\030\001 \002(\002\022\r\n\005right\030\002 \002(\002\"\'\n\010Encoder"
      "s\022\014\n\004left\030\001 \002(\005\022\r\n\005right\030\002 \002(\005\"-\n\nPidTun"
      "ings\022\t\n\001p\030\001 \002(\002\022\t\n\001i\030\002 \002(\002\022\t\n\001d\030\003 \002(\002\"1\n"
      "\002Ir\022\014\n\004left\030\001 \002(\010\022\016\n\006center\030\002 \002(\010\022\r\n\005rig"
      "ht\030\003 \002(\010\"\246\001\n\006Status\022\034\n\004pose\030\001 \002(\0132\016.snd_"
      "msgs.Pose\022\036\n\005speed\030\002 \002(\0132\017.snd_msgs.Spee"
      "d\022\017\n\007starter\030\003 \002(\010\022\r\n\005estop\030\004 \002(\010\022\030\n\002ir\030"
      "\005 \002(\0132\014.snd_msgs.Ir\022$\n\010encoders\030\006 \002(\0132\022."
      "snd_msgs.Encoders\"\222\001\n\003Log\022\r\n\005stamp\030\001 \002(\r"
      "\022,\n\005level\030\002 \002(\0162\027.snd_msgs.Log.eLogLevel"
      ":\004INFO\022\014\n\004text\030\003 \002(\t\"@\n\teLogLevel\022\t\n\005DEB"
      "UG\020\000\022\010\n\004INFO\020\001\022\010\n\004WARN\020\002\022\t\n\005ERROR\020\003\022\t\n\005F"
      "ATAL\020\004\"\213\004\n\rSerialRequest\022\'\n\tgetStatus\030\001 "
      "\001(\0132\022.snd_msgs.EmptyMsgH\000\022)\n\013getEncoders"
      "\030\002 \001(\0132\022.snd_msgs.EmptyMsgH\000\022)\n\013getPosit"
      "ion\030\003 \001(\0132\022.snd_msgs.EmptyMsgH\000\022,\n\016getMo"
      "torsSpeed\030\004 \001(\0132\022.snd_msgs.EmptyMsgH\000\022-\n"
      "\017getPidSpeedLeft\030\005 \001(\0132\022.snd_msgs.EmptyM"
      "sgH\000\022.\n\020getPidSpeedRight\030\006 \001(\0132\022.snd_msg"
      "s.EmptyMsgH\000\022-\n\017getStarterState\030\007 \001(\0132\022."
      "snd_msgs.EmptyMsgH\000\022)\n\016setMotorsSpeed\030\n "
      "\001(\0132\017.snd_msgs.SpeedH\000\022/\n\017setPidSpeedLef"
      "t\030\013 \001(\0132\024.snd_msgs.PidTuningsH\000\0220\n\020setPi"
      "dSpeedRight\030\014 \001(\0132\024.snd_msgs.PidTuningsH"
      "\000\022)\n\013setEncoders\030\r \001(\0132\022.snd_msgs.Encode"
      "rsH\000B\006\n\004type\"\271\002\n\016SerialResponse\022\034\n\003log\030\001"
      " \001(\0132\r.snd_msgs.LogH\000\022&\n\010encoders\030\002 \001(\0132"
      "\022.snd_msgs.EncodersH\000\022\036\n\004pose\030\003 \001(\0132\016.sn"
      "d_msgs.PoseH\000\022 \n\005speed\030\004 \001(\0132\017.snd_msgs."
      "SpeedH\000\022,\n\014pidSpeedLeft\030\005 \001(\0132\024.snd_msgs"
      ".PidTuningsH\000\022-\n\rpidSpeedRight\030\006 \001(\0132\024.s"
      "nd_msgs.PidTuningsH\000\022\026\n\014isStarterSet\030\007 \001"
      "(\010H\000\022\"\n\006status\030\010 \001(\0132\020.snd_msgs.StatusH\000"
      "B\006\n\004type"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1448);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CommMsgs.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_CommMsgs_2eproto

const ::google::protobuf::EnumDescriptor* Log_eLogLevel_descriptor() {
  protobuf_CommMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommMsgs_2eproto::file_level_enum_descriptors[0];
}
bool Log_eLogLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Log_eLogLevel Log::DEBUG;
const Log_eLogLevel Log::INFO;
const Log_eLogLevel Log::WARN;
const Log_eLogLevel Log::ERROR;
const Log_eLogLevel Log::FATAL;
const Log_eLogLevel Log::eLogLevel_MIN;
const Log_eLogLevel Log::eLogLevel_MAX;
const int Log::eLogLevel_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EmptyMsg::EmptyMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_CommMsgs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:snd_msgs.EmptyMsg)
}
EmptyMsg::EmptyMsg(const EmptyMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:snd_msgs.EmptyMsg)
}

void EmptyMsg::SharedCtor() {
  _cached_size_ = 0;
}

EmptyMsg::~EmptyMsg() {
  // @@protoc_insertion_point(destructor:snd_msgs.EmptyMsg)
  SharedDtor();
}

void EmptyMsg::SharedDtor() {
}

void EmptyMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmptyMsg::descriptor() {
  protobuf_CommMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommMsgs_2eproto::file_level_metadata[0].descriptor;
}

const EmptyMsg& EmptyMsg::default_instance() {
  protobuf_CommMsgs_2eproto::InitDefaults();
  return *internal_default_instance();
}

EmptyMsg* EmptyMsg::New(::google::protobuf::Arena* arena) const {
  EmptyMsg* n = new EmptyMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EmptyMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:snd_msgs.EmptyMsg)
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EmptyMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:snd_msgs.EmptyMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:snd_msgs.EmptyMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:snd_msgs.EmptyMsg)
  return false;
#undef DO_
}

void EmptyMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:snd_msgs.EmptyMsg)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:snd_msgs.EmptyMsg)
}

::google::protobuf::uint8* EmptyMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:snd_msgs.EmptyMsg)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snd_msgs.EmptyMsg)
  return target;
}

size_t EmptyMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snd_msgs.EmptyMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmptyMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:snd_msgs.EmptyMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const EmptyMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EmptyMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:snd_msgs.EmptyMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:snd_msgs.EmptyMsg)
    MergeFrom(*source);
  }
}

void EmptyMsg::MergeFrom(const EmptyMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:snd_msgs.EmptyMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
}

void EmptyMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:snd_msgs.EmptyMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmptyMsg::CopyFrom(const EmptyMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snd_msgs.EmptyMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmptyMsg::IsInitialized() const {
  return true;
}

void EmptyMsg::Swap(EmptyMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EmptyMsg::InternalSwap(EmptyMsg* other) {
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EmptyMsg::GetMetadata() const {
  protobuf_CommMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommMsgs_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EmptyMsg

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Point::kXFieldNumber;
const int Point::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Point::Point()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_CommMsgs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:snd_msgs.Point)
}
Point::Point(const Point& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:snd_msgs.Point)
}

void Point::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&x_, 0, reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_) + sizeof(y_));
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:snd_msgs.Point)
  SharedDtor();
}

void Point::SharedDtor() {
}

void Point::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Point::descriptor() {
  protobuf_CommMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommMsgs_2eproto::file_level_metadata[1].descriptor;
}

const Point& Point::default_instance() {
  protobuf_CommMsgs_2eproto::InitDefaults();
  return *internal_default_instance();
}

Point* Point::New(::google::protobuf::Arena* arena) const {
  Point* n = new Point;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Point::Clear() {
// @@protoc_insertion_point(message_clear_start:snd_msgs.Point)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&x_, 0, reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:snd_msgs.Point)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (tag == 13u) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float y = 2;
      case 2: {
        if (tag == 21u) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:snd_msgs.Point)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:snd_msgs.Point)
  return false;
#undef DO_
}

void Point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:snd_msgs.Point)
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:snd_msgs.Point)
}

::google::protobuf::uint8* Point::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:snd_msgs.Point)
  // required float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snd_msgs.Point)
  return target;
}

size_t Point::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:snd_msgs.Point)
  size_t total_size = 0;

  if (has_x()) {
    // required float x = 1;
    total_size += 1 + 4;
  }

  if (has_y()) {
    // required float y = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snd_msgs.Point)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required float x = 1;
    total_size += 1 + 4;

    // required float y = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Point::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:snd_msgs.Point)
  GOOGLE_DCHECK_NE(&from, this);
  const Point* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Point>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:snd_msgs.Point)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:snd_msgs.Point)
    MergeFrom(*source);
  }
}

void Point::MergeFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:snd_msgs.Point)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
}

void Point::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:snd_msgs.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point::CopyFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snd_msgs.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Point::Swap(Point* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Point::InternalSwap(Point* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Point::GetMetadata() const {
  protobuf_CommMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommMsgs_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Point

// required float x = 1;
bool Point::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Point::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void Point::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void Point::clear_x() {
  x_ = 0;
  clear_has_x();
}
float Point::x() const {
  // @@protoc_insertion_point(field_get:snd_msgs.Point.x)
  return x_;
}
void Point::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:snd_msgs.Point.x)
}

// required float y = 2;
bool Point::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Point::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void Point::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void Point::clear_y() {
  y_ = 0;
  clear_has_y();
}
float Point::y() const {
  // @@protoc_insertion_point(field_get:snd_msgs.Point.y)
  return y_;
}
void Point::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:snd_msgs.Point.y)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Pose::kXFieldNumber;
const int Pose::kYFieldNumber;
const int Pose::kThFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Pose::Pose()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_CommMsgs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:snd_msgs.Pose)
}
Pose::Pose(const Pose& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    reinterpret_cast<char*>(&th_) -
    reinterpret_cast<char*>(&x_) + sizeof(th_));
  // @@protoc_insertion_point(copy_constructor:snd_msgs.Pose)
}

void Pose::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&x_, 0, reinterpret_cast<char*>(&th_) -
    reinterpret_cast<char*>(&x_) + sizeof(th_));
}

Pose::~Pose() {
  // @@protoc_insertion_point(destructor:snd_msgs.Pose)
  SharedDtor();
}

void Pose::SharedDtor() {
}

void Pose::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pose::descriptor() {
  protobuf_CommMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommMsgs_2eproto::file_level_metadata[2].descriptor;
}

const Pose& Pose::default_instance() {
  protobuf_CommMsgs_2eproto::InitDefaults();
  return *internal_default_instance();
}

Pose* Pose::New(::google::protobuf::Arena* arena) const {
  Pose* n = new Pose;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Pose::Clear() {
// @@protoc_insertion_point(message_clear_start:snd_msgs.Pose)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&x_, 0, reinterpret_cast<char*>(&th_) -
      reinterpret_cast<char*>(&x_) + sizeof(th_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Pose::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:snd_msgs.Pose)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (tag == 13u) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float y = 2;
      case 2: {
        if (tag == 21u) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float th = 3;
      case 3: {
        if (tag == 29u) {
          set_has_th();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &th_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:snd_msgs.Pose)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:snd_msgs.Pose)
  return false;
#undef DO_
}

void Pose::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:snd_msgs.Pose)
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // required float th = 3;
  if (has_th()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->th(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:snd_msgs.Pose)
}

::google::protobuf::uint8* Pose::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:snd_msgs.Pose)
  // required float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // required float th = 3;
  if (has_th()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->th(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snd_msgs.Pose)
  return target;
}

size_t Pose::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:snd_msgs.Pose)
  size_t total_size = 0;

  if (has_x()) {
    // required float x = 1;
    total_size += 1 + 4;
  }

  if (has_y()) {
    // required float y = 2;
    total_size += 1 + 4;
  }

  if (has_th()) {
    // required float th = 3;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t Pose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snd_msgs.Pose)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required float x = 1;
    total_size += 1 + 4;

    // required float y = 2;
    total_size += 1 + 4;

    // required float th = 3;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pose::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:snd_msgs.Pose)
  GOOGLE_DCHECK_NE(&from, this);
  const Pose* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Pose>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:snd_msgs.Pose)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:snd_msgs.Pose)
    MergeFrom(*source);
  }
}

void Pose::MergeFrom(const Pose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:snd_msgs.Pose)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_th()) {
      set_th(from.th());
    }
  }
}

void Pose::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:snd_msgs.Pose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pose::CopyFrom(const Pose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snd_msgs.Pose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pose::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void Pose::Swap(Pose* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Pose::InternalSwap(Pose* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(th_, other->th_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Pose::GetMetadata() const {
  protobuf_CommMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommMsgs_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Pose

// required float x = 1;
bool Pose::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Pose::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void Pose::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void Pose::clear_x() {
  x_ = 0;
  clear_has_x();
}
float Pose::x() const {
  // @@protoc_insertion_point(field_get:snd_msgs.Pose.x)
  return x_;
}
void Pose::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:snd_msgs.Pose.x)
}

// required float y = 2;
bool Pose::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Pose::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void Pose::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void Pose::clear_y() {
  y_ = 0;
  clear_has_y();
}
float Pose::y() const {
  // @@protoc_insertion_point(field_get:snd_msgs.Pose.y)
  return y_;
}
void Pose::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:snd_msgs.Pose.y)
}

// required float th = 3;
bool Pose::has_th() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Pose::set_has_th() {
  _has_bits_[0] |= 0x00000004u;
}
void Pose::clear_has_th() {
  _has_bits_[0] &= ~0x00000004u;
}
void Pose::clear_th() {
  th_ = 0;
  clear_has_th();
}
float Pose::th() const {
  // @@protoc_insertion_point(field_get:snd_msgs.Pose.th)
  return th_;
}
void Pose::set_th(float value) {
  set_has_th();
  th_ = value;
  // @@protoc_insertion_point(field_set:snd_msgs.Pose.th)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Speed::kLeftFieldNumber;
const int Speed::kRightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Speed::Speed()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_CommMsgs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:snd_msgs.Speed)
}
Speed::Speed(const Speed& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&left_, &from.left_,
    reinterpret_cast<char*>(&right_) -
    reinterpret_cast<char*>(&left_) + sizeof(right_));
  // @@protoc_insertion_point(copy_constructor:snd_msgs.Speed)
}

void Speed::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&left_, 0, reinterpret_cast<char*>(&right_) -
    reinterpret_cast<char*>(&left_) + sizeof(right_));
}

Speed::~Speed() {
  // @@protoc_insertion_point(destructor:snd_msgs.Speed)
  SharedDtor();
}

void Speed::SharedDtor() {
}

void Speed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Speed::descriptor() {
  protobuf_CommMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommMsgs_2eproto::file_level_metadata[3].descriptor;
}

const Speed& Speed::default_instance() {
  protobuf_CommMsgs_2eproto::InitDefaults();
  return *internal_default_instance();
}

Speed* Speed::New(::google::protobuf::Arena* arena) const {
  Speed* n = new Speed;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Speed::Clear() {
// @@protoc_insertion_point(message_clear_start:snd_msgs.Speed)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&left_, 0, reinterpret_cast<char*>(&right_) -
      reinterpret_cast<char*>(&left_) + sizeof(right_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Speed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:snd_msgs.Speed)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float left = 1;
      case 1: {
        if (tag == 13u) {
          set_has_left();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float right = 2;
      case 2: {
        if (tag == 21u) {
          set_has_right();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &right_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:snd_msgs.Speed)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:snd_msgs.Speed)
  return false;
#undef DO_
}

void Speed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:snd_msgs.Speed)
  // required float left = 1;
  if (has_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->left(), output);
  }

  // required float right = 2;
  if (has_right()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->right(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:snd_msgs.Speed)
}

::google::protobuf::uint8* Speed::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:snd_msgs.Speed)
  // required float left = 1;
  if (has_left()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->left(), target);
  }

  // required float right = 2;
  if (has_right()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->right(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snd_msgs.Speed)
  return target;
}

size_t Speed::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:snd_msgs.Speed)
  size_t total_size = 0;

  if (has_left()) {
    // required float left = 1;
    total_size += 1 + 4;
  }

  if (has_right()) {
    // required float right = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t Speed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snd_msgs.Speed)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required float left = 1;
    total_size += 1 + 4;

    // required float right = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Speed::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:snd_msgs.Speed)
  GOOGLE_DCHECK_NE(&from, this);
  const Speed* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Speed>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:snd_msgs.Speed)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:snd_msgs.Speed)
    MergeFrom(*source);
  }
}

void Speed::MergeFrom(const Speed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:snd_msgs.Speed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_left()) {
      set_left(from.left());
    }
    if (from.has_right()) {
      set_right(from.right());
    }
  }
}

void Speed::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:snd_msgs.Speed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Speed::CopyFrom(const Speed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snd_msgs.Speed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Speed::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Speed::Swap(Speed* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Speed::InternalSwap(Speed* other) {
  std::swap(left_, other->left_);
  std::swap(right_, other->right_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Speed::GetMetadata() const {
  protobuf_CommMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommMsgs_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Speed

// required float left = 1;
bool Speed::has_left() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Speed::set_has_left() {
  _has_bits_[0] |= 0x00000001u;
}
void Speed::clear_has_left() {
  _has_bits_[0] &= ~0x00000001u;
}
void Speed::clear_left() {
  left_ = 0;
  clear_has_left();
}
float Speed::left() const {
  // @@protoc_insertion_point(field_get:snd_msgs.Speed.left)
  return left_;
}
void Speed::set_left(float value) {
  set_has_left();
  left_ = value;
  // @@protoc_insertion_point(field_set:snd_msgs.Speed.left)
}

// required float right = 2;
bool Speed::has_right() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Speed::set_has_right() {
  _has_bits_[0] |= 0x00000002u;
}
void Speed::clear_has_right() {
  _has_bits_[0] &= ~0x00000002u;
}
void Speed::clear_right() {
  right_ = 0;
  clear_has_right();
}
float Speed::right() const {
  // @@protoc_insertion_point(field_get:snd_msgs.Speed.right)
  return right_;
}
void Speed::set_right(float value) {
  set_has_right();
  right_ = value;
  // @@protoc_insertion_point(field_set:snd_msgs.Speed.right)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Encoders::kLeftFieldNumber;
const int Encoders::kRightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Encoders::Encoders()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_CommMsgs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:snd_msgs.Encoders)
}
Encoders::Encoders(const Encoders& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&left_, &from.left_,
    reinterpret_cast<char*>(&right_) -
    reinterpret_cast<char*>(&left_) + sizeof(right_));
  // @@protoc_insertion_point(copy_constructor:snd_msgs.Encoders)
}

void Encoders::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&left_, 0, reinterpret_cast<char*>(&right_) -
    reinterpret_cast<char*>(&left_) + sizeof(right_));
}

Encoders::~Encoders() {
  // @@protoc_insertion_point(destructor:snd_msgs.Encoders)
  SharedDtor();
}

void Encoders::SharedDtor() {
}

void Encoders::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Encoders::descriptor() {
  protobuf_CommMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommMsgs_2eproto::file_level_metadata[4].descriptor;
}

const Encoders& Encoders::default_instance() {
  protobuf_CommMsgs_2eproto::InitDefaults();
  return *internal_default_instance();
}

Encoders* Encoders::New(::google::protobuf::Arena* arena) const {
  Encoders* n = new Encoders;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Encoders::Clear() {
// @@protoc_insertion_point(message_clear_start:snd_msgs.Encoders)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&left_, 0, reinterpret_cast<char*>(&right_) -
      reinterpret_cast<char*>(&left_) + sizeof(right_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Encoders::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:snd_msgs.Encoders)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 left = 1;
      case 1: {
        if (tag == 8u) {
          set_has_left();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 right = 2;
      case 2: {
        if (tag == 16u) {
          set_has_right();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &right_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:snd_msgs.Encoders)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:snd_msgs.Encoders)
  return false;
#undef DO_
}

void Encoders::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:snd_msgs.Encoders)
  // required int32 left = 1;
  if (has_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->left(), output);
  }

  // required int32 right = 2;
  if (has_right()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->right(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:snd_msgs.Encoders)
}

::google::protobuf::uint8* Encoders::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:snd_msgs.Encoders)
  // required int32 left = 1;
  if (has_left()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->left(), target);
  }

  // required int32 right = 2;
  if (has_right()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->right(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snd_msgs.Encoders)
  return target;
}

size_t Encoders::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:snd_msgs.Encoders)
  size_t total_size = 0;

  if (has_left()) {
    // required int32 left = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->left());
  }

  if (has_right()) {
    // required int32 right = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->right());
  }

  return total_size;
}
size_t Encoders::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snd_msgs.Encoders)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 left = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->left());

    // required int32 right = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->right());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Encoders::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:snd_msgs.Encoders)
  GOOGLE_DCHECK_NE(&from, this);
  const Encoders* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Encoders>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:snd_msgs.Encoders)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:snd_msgs.Encoders)
    MergeFrom(*source);
  }
}

void Encoders::MergeFrom(const Encoders& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:snd_msgs.Encoders)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_left()) {
      set_left(from.left());
    }
    if (from.has_right()) {
      set_right(from.right());
    }
  }
}

void Encoders::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:snd_msgs.Encoders)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Encoders::CopyFrom(const Encoders& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snd_msgs.Encoders)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Encoders::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Encoders::Swap(Encoders* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Encoders::InternalSwap(Encoders* other) {
  std::swap(left_, other->left_);
  std::swap(right_, other->right_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Encoders::GetMetadata() const {
  protobuf_CommMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommMsgs_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Encoders

// required int32 left = 1;
bool Encoders::has_left() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Encoders::set_has_left() {
  _has_bits_[0] |= 0x00000001u;
}
void Encoders::clear_has_left() {
  _has_bits_[0] &= ~0x00000001u;
}
void Encoders::clear_left() {
  left_ = 0;
  clear_has_left();
}
::google::protobuf::int32 Encoders::left() const {
  // @@protoc_insertion_point(field_get:snd_msgs.Encoders.left)
  return left_;
}
void Encoders::set_left(::google::protobuf::int32 value) {
  set_has_left();
  left_ = value;
  // @@protoc_insertion_point(field_set:snd_msgs.Encoders.left)
}

// required int32 right = 2;
bool Encoders::has_right() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Encoders::set_has_right() {
  _has_bits_[0] |= 0x00000002u;
}
void Encoders::clear_has_right() {
  _has_bits_[0] &= ~0x00000002u;
}
void Encoders::clear_right() {
  right_ = 0;
  clear_has_right();
}
::google::protobuf::int32 Encoders::right() const {
  // @@protoc_insertion_point(field_get:snd_msgs.Encoders.right)
  return right_;
}
void Encoders::set_right(::google::protobuf::int32 value) {
  set_has_right();
  right_ = value;
  // @@protoc_insertion_point(field_set:snd_msgs.Encoders.right)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PidTunings::kPFieldNumber;
const int PidTunings::kIFieldNumber;
const int PidTunings::kDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PidTunings::PidTunings()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_CommMsgs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:snd_msgs.PidTunings)
}
PidTunings::PidTunings(const PidTunings& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&p_, &from.p_,
    reinterpret_cast<char*>(&d_) -
    reinterpret_cast<char*>(&p_) + sizeof(d_));
  // @@protoc_insertion_point(copy_constructor:snd_msgs.PidTunings)
}

void PidTunings::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&p_, 0, reinterpret_cast<char*>(&d_) -
    reinterpret_cast<char*>(&p_) + sizeof(d_));
}

PidTunings::~PidTunings() {
  // @@protoc_insertion_point(destructor:snd_msgs.PidTunings)
  SharedDtor();
}

void PidTunings::SharedDtor() {
}

void PidTunings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PidTunings::descriptor() {
  protobuf_CommMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommMsgs_2eproto::file_level_metadata[5].descriptor;
}

const PidTunings& PidTunings::default_instance() {
  protobuf_CommMsgs_2eproto::InitDefaults();
  return *internal_default_instance();
}

PidTunings* PidTunings::New(::google::protobuf::Arena* arena) const {
  PidTunings* n = new PidTunings;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PidTunings::Clear() {
// @@protoc_insertion_point(message_clear_start:snd_msgs.PidTunings)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&p_, 0, reinterpret_cast<char*>(&d_) -
      reinterpret_cast<char*>(&p_) + sizeof(d_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PidTunings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:snd_msgs.PidTunings)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float p = 1;
      case 1: {
        if (tag == 13u) {
          set_has_p();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &p_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float i = 2;
      case 2: {
        if (tag == 21u) {
          set_has_i();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &i_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float d = 3;
      case 3: {
        if (tag == 29u) {
          set_has_d();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &d_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:snd_msgs.PidTunings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:snd_msgs.PidTunings)
  return false;
#undef DO_
}

void PidTunings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:snd_msgs.PidTunings)
  // required float p = 1;
  if (has_p()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->p(), output);
  }

  // required float i = 2;
  if (has_i()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->i(), output);
  }

  // required float d = 3;
  if (has_d()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->d(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:snd_msgs.PidTunings)
}

::google::protobuf::uint8* PidTunings::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:snd_msgs.PidTunings)
  // required float p = 1;
  if (has_p()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->p(), target);
  }

  // required float i = 2;
  if (has_i()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->i(), target);
  }

  // required float d = 3;
  if (has_d()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->d(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snd_msgs.PidTunings)
  return target;
}

size_t PidTunings::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:snd_msgs.PidTunings)
  size_t total_size = 0;

  if (has_p()) {
    // required float p = 1;
    total_size += 1 + 4;
  }

  if (has_i()) {
    // required float i = 2;
    total_size += 1 + 4;
  }

  if (has_d()) {
    // required float d = 3;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t PidTunings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snd_msgs.PidTunings)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required float p = 1;
    total_size += 1 + 4;

    // required float i = 2;
    total_size += 1 + 4;

    // required float d = 3;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PidTunings::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:snd_msgs.PidTunings)
  GOOGLE_DCHECK_NE(&from, this);
  const PidTunings* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PidTunings>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:snd_msgs.PidTunings)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:snd_msgs.PidTunings)
    MergeFrom(*source);
  }
}

void PidTunings::MergeFrom(const PidTunings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:snd_msgs.PidTunings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_p()) {
      set_p(from.p());
    }
    if (from.has_i()) {
      set_i(from.i());
    }
    if (from.has_d()) {
      set_d(from.d());
    }
  }
}

void PidTunings::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:snd_msgs.PidTunings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PidTunings::CopyFrom(const PidTunings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snd_msgs.PidTunings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PidTunings::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void PidTunings::Swap(PidTunings* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PidTunings::InternalSwap(PidTunings* other) {
  std::swap(p_, other->p_);
  std::swap(i_, other->i_);
  std::swap(d_, other->d_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PidTunings::GetMetadata() const {
  protobuf_CommMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommMsgs_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PidTunings

// required float p = 1;
bool PidTunings::has_p() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PidTunings::set_has_p() {
  _has_bits_[0] |= 0x00000001u;
}
void PidTunings::clear_has_p() {
  _has_bits_[0] &= ~0x00000001u;
}
void PidTunings::clear_p() {
  p_ = 0;
  clear_has_p();
}
float PidTunings::p() const {
  // @@protoc_insertion_point(field_get:snd_msgs.PidTunings.p)
  return p_;
}
void PidTunings::set_p(float value) {
  set_has_p();
  p_ = value;
  // @@protoc_insertion_point(field_set:snd_msgs.PidTunings.p)
}

// required float i = 2;
bool PidTunings::has_i() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PidTunings::set_has_i() {
  _has_bits_[0] |= 0x00000002u;
}
void PidTunings::clear_has_i() {
  _has_bits_[0] &= ~0x00000002u;
}
void PidTunings::clear_i() {
  i_ = 0;
  clear_has_i();
}
float PidTunings::i() const {
  // @@protoc_insertion_point(field_get:snd_msgs.PidTunings.i)
  return i_;
}
void PidTunings::set_i(float value) {
  set_has_i();
  i_ = value;
  // @@protoc_insertion_point(field_set:snd_msgs.PidTunings.i)
}

// required float d = 3;
bool PidTunings::has_d() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PidTunings::set_has_d() {
  _has_bits_[0] |= 0x00000004u;
}
void PidTunings::clear_has_d() {
  _has_bits_[0] &= ~0x00000004u;
}
void PidTunings::clear_d() {
  d_ = 0;
  clear_has_d();
}
float PidTunings::d() const {
  // @@protoc_insertion_point(field_get:snd_msgs.PidTunings.d)
  return d_;
}
void PidTunings::set_d(float value) {
  set_has_d();
  d_ = value;
  // @@protoc_insertion_point(field_set:snd_msgs.PidTunings.d)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ir::kLeftFieldNumber;
const int Ir::kCenterFieldNumber;
const int Ir::kRightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ir::Ir()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_CommMsgs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:snd_msgs.Ir)
}
Ir::Ir(const Ir& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&left_, &from.left_,
    reinterpret_cast<char*>(&right_) -
    reinterpret_cast<char*>(&left_) + sizeof(right_));
  // @@protoc_insertion_point(copy_constructor:snd_msgs.Ir)
}

void Ir::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&left_, 0, reinterpret_cast<char*>(&right_) -
    reinterpret_cast<char*>(&left_) + sizeof(right_));
}

Ir::~Ir() {
  // @@protoc_insertion_point(destructor:snd_msgs.Ir)
  SharedDtor();
}

void Ir::SharedDtor() {
}

void Ir::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ir::descriptor() {
  protobuf_CommMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommMsgs_2eproto::file_level_metadata[6].descriptor;
}

const Ir& Ir::default_instance() {
  protobuf_CommMsgs_2eproto::InitDefaults();
  return *internal_default_instance();
}

Ir* Ir::New(::google::protobuf::Arena* arena) const {
  Ir* n = new Ir;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ir::Clear() {
// @@protoc_insertion_point(message_clear_start:snd_msgs.Ir)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&left_, 0, reinterpret_cast<char*>(&right_) -
      reinterpret_cast<char*>(&left_) + sizeof(right_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Ir::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:snd_msgs.Ir)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool left = 1;
      case 1: {
        if (tag == 8u) {
          set_has_left();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool center = 2;
      case 2: {
        if (tag == 16u) {
          set_has_center();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &center_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool right = 3;
      case 3: {
        if (tag == 24u) {
          set_has_right();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &right_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:snd_msgs.Ir)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:snd_msgs.Ir)
  return false;
#undef DO_
}

void Ir::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:snd_msgs.Ir)
  // required bool left = 1;
  if (has_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->left(), output);
  }

  // required bool center = 2;
  if (has_center()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->center(), output);
  }

  // required bool right = 3;
  if (has_right()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->right(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:snd_msgs.Ir)
}

::google::protobuf::uint8* Ir::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:snd_msgs.Ir)
  // required bool left = 1;
  if (has_left()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->left(), target);
  }

  // required bool center = 2;
  if (has_center()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->center(), target);
  }

  // required bool right = 3;
  if (has_right()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->right(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snd_msgs.Ir)
  return target;
}

size_t Ir::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:snd_msgs.Ir)
  size_t total_size = 0;

  if (has_left()) {
    // required bool left = 1;
    total_size += 1 + 1;
  }

  if (has_center()) {
    // required bool center = 2;
    total_size += 1 + 1;
  }

  if (has_right()) {
    // required bool right = 3;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t Ir::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snd_msgs.Ir)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required bool left = 1;
    total_size += 1 + 1;

    // required bool center = 2;
    total_size += 1 + 1;

    // required bool right = 3;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ir::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:snd_msgs.Ir)
  GOOGLE_DCHECK_NE(&from, this);
  const Ir* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ir>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:snd_msgs.Ir)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:snd_msgs.Ir)
    MergeFrom(*source);
  }
}

void Ir::MergeFrom(const Ir& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:snd_msgs.Ir)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_left()) {
      set_left(from.left());
    }
    if (from.has_center()) {
      set_center(from.center());
    }
    if (from.has_right()) {
      set_right(from.right());
    }
  }
}

void Ir::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:snd_msgs.Ir)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ir::CopyFrom(const Ir& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snd_msgs.Ir)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ir::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void Ir::Swap(Ir* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ir::InternalSwap(Ir* other) {
  std::swap(left_, other->left_);
  std::swap(center_, other->center_);
  std::swap(right_, other->right_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Ir::GetMetadata() const {
  protobuf_CommMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommMsgs_2eproto::file_level_metadata[6];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Ir

// required bool left = 1;
bool Ir::has_left() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Ir::set_has_left() {
  _has_bits_[0] |= 0x00000001u;
}
void Ir::clear_has_left() {
  _has_bits_[0] &= ~0x00000001u;
}
void Ir::clear_left() {
  left_ = false;
  clear_has_left();
}
bool Ir::left() const {
  // @@protoc_insertion_point(field_get:snd_msgs.Ir.left)
  return left_;
}
void Ir::set_left(bool value) {
  set_has_left();
  left_ = value;
  // @@protoc_insertion_point(field_set:snd_msgs.Ir.left)
}

// required bool center = 2;
bool Ir::has_center() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Ir::set_has_center() {
  _has_bits_[0] |= 0x00000002u;
}
void Ir::clear_has_center() {
  _has_bits_[0] &= ~0x00000002u;
}
void Ir::clear_center() {
  center_ = false;
  clear_has_center();
}
bool Ir::center() const {
  // @@protoc_insertion_point(field_get:snd_msgs.Ir.center)
  return center_;
}
void Ir::set_center(bool value) {
  set_has_center();
  center_ = value;
  // @@protoc_insertion_point(field_set:snd_msgs.Ir.center)
}

// required bool right = 3;
bool Ir::has_right() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Ir::set_has_right() {
  _has_bits_[0] |= 0x00000004u;
}
void Ir::clear_has_right() {
  _has_bits_[0] &= ~0x00000004u;
}
void Ir::clear_right() {
  right_ = false;
  clear_has_right();
}
bool Ir::right() const {
  // @@protoc_insertion_point(field_get:snd_msgs.Ir.right)
  return right_;
}
void Ir::set_right(bool value) {
  set_has_right();
  right_ = value;
  // @@protoc_insertion_point(field_set:snd_msgs.Ir.right)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Status::kPoseFieldNumber;
const int Status::kSpeedFieldNumber;
const int Status::kStarterFieldNumber;
const int Status::kEstopFieldNumber;
const int Status::kIrFieldNumber;
const int Status::kEncodersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Status::Status()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_CommMsgs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:snd_msgs.Status)
}
Status::Status(const Status& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pose()) {
    pose_ = new ::snd_msgs::Pose(*from.pose_);
  } else {
    pose_ = NULL;
  }
  if (from.has_speed()) {
    speed_ = new ::snd_msgs::Speed(*from.speed_);
  } else {
    speed_ = NULL;
  }
  if (from.has_ir()) {
    ir_ = new ::snd_msgs::Ir(*from.ir_);
  } else {
    ir_ = NULL;
  }
  if (from.has_encoders()) {
    encoders_ = new ::snd_msgs::Encoders(*from.encoders_);
  } else {
    encoders_ = NULL;
  }
  ::memcpy(&starter_, &from.starter_,
    reinterpret_cast<char*>(&estop_) -
    reinterpret_cast<char*>(&starter_) + sizeof(estop_));
  // @@protoc_insertion_point(copy_constructor:snd_msgs.Status)
}

void Status::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&pose_, 0, reinterpret_cast<char*>(&estop_) -
    reinterpret_cast<char*>(&pose_) + sizeof(estop_));
}

Status::~Status() {
  // @@protoc_insertion_point(destructor:snd_msgs.Status)
  SharedDtor();
}

void Status::SharedDtor() {
  if (this != internal_default_instance()) {
    delete pose_;
  }
  if (this != internal_default_instance()) {
    delete speed_;
  }
  if (this != internal_default_instance()) {
    delete ir_;
  }
  if (this != internal_default_instance()) {
    delete encoders_;
  }
}

void Status::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Status::descriptor() {
  protobuf_CommMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommMsgs_2eproto::file_level_metadata[7].descriptor;
}

const Status& Status::default_instance() {
  protobuf_CommMsgs_2eproto::InitDefaults();
  return *internal_default_instance();
}

Status* Status::New(::google::protobuf::Arena* arena) const {
  Status* n = new Status;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Status::Clear() {
// @@protoc_insertion_point(message_clear_start:snd_msgs.Status)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_pose()) {
      GOOGLE_DCHECK(pose_ != NULL);
      pose_->::snd_msgs::Pose::Clear();
    }
    if (has_speed()) {
      GOOGLE_DCHECK(speed_ != NULL);
      speed_->::snd_msgs::Speed::Clear();
    }
    if (has_ir()) {
      GOOGLE_DCHECK(ir_ != NULL);
      ir_->::snd_msgs::Ir::Clear();
    }
    if (has_encoders()) {
      GOOGLE_DCHECK(encoders_ != NULL);
      encoders_->::snd_msgs::Encoders::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 48u) {
    ::memset(&starter_, 0, reinterpret_cast<char*>(&estop_) -
      reinterpret_cast<char*>(&starter_) + sizeof(estop_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Status::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:snd_msgs.Status)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .snd_msgs.Pose pose = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .snd_msgs.Speed speed = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_speed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool starter = 3;
      case 3: {
        if (tag == 24u) {
          set_has_starter();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &starter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool estop = 4;
      case 4: {
        if (tag == 32u) {
          set_has_estop();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &estop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .snd_msgs.Ir ir = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ir()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .snd_msgs.Encoders encoders = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_encoders()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:snd_msgs.Status)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:snd_msgs.Status)
  return false;
#undef DO_
}

void Status::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:snd_msgs.Status)
  // required .snd_msgs.Pose pose = 1;
  if (has_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->pose_, output);
  }

  // required .snd_msgs.Speed speed = 2;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->speed_, output);
  }

  // required bool starter = 3;
  if (has_starter()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->starter(), output);
  }

  // required bool estop = 4;
  if (has_estop()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->estop(), output);
  }

  // required .snd_msgs.Ir ir = 5;
  if (has_ir()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->ir_, output);
  }

  // required .snd_msgs.Encoders encoders = 6;
  if (has_encoders()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->encoders_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:snd_msgs.Status)
}

::google::protobuf::uint8* Status::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:snd_msgs.Status)
  // required .snd_msgs.Pose pose = 1;
  if (has_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->pose_, false, target);
  }

  // required .snd_msgs.Speed speed = 2;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->speed_, false, target);
  }

  // required bool starter = 3;
  if (has_starter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->starter(), target);
  }

  // required bool estop = 4;
  if (has_estop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->estop(), target);
  }

  // required .snd_msgs.Ir ir = 5;
  if (has_ir()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->ir_, false, target);
  }

  // required .snd_msgs.Encoders encoders = 6;
  if (has_encoders()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->encoders_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snd_msgs.Status)
  return target;
}

size_t Status::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:snd_msgs.Status)
  size_t total_size = 0;

  if (has_pose()) {
    // required .snd_msgs.Pose pose = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pose_);
  }

  if (has_speed()) {
    // required .snd_msgs.Speed speed = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->speed_);
  }

  if (has_ir()) {
    // required .snd_msgs.Ir ir = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ir_);
  }

  if (has_encoders()) {
    // required .snd_msgs.Encoders encoders = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->encoders_);
  }

  if (has_starter()) {
    // required bool starter = 3;
    total_size += 1 + 1;
  }

  if (has_estop()) {
    // required bool estop = 4;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t Status::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snd_msgs.Status)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required .snd_msgs.Pose pose = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pose_);

    // required .snd_msgs.Speed speed = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->speed_);

    // required .snd_msgs.Ir ir = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ir_);

    // required .snd_msgs.Encoders encoders = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->encoders_);

    // required bool starter = 3;
    total_size += 1 + 1;

    // required bool estop = 4;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Status::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:snd_msgs.Status)
  GOOGLE_DCHECK_NE(&from, this);
  const Status* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Status>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:snd_msgs.Status)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:snd_msgs.Status)
    MergeFrom(*source);
  }
}

void Status::MergeFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:snd_msgs.Status)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 63u) {
    if (from.has_pose()) {
      mutable_pose()->::snd_msgs::Pose::MergeFrom(from.pose());
    }
    if (from.has_speed()) {
      mutable_speed()->::snd_msgs::Speed::MergeFrom(from.speed());
    }
    if (from.has_ir()) {
      mutable_ir()->::snd_msgs::Ir::MergeFrom(from.ir());
    }
    if (from.has_encoders()) {
      mutable_encoders()->::snd_msgs::Encoders::MergeFrom(from.encoders());
    }
    if (from.has_starter()) {
      set_starter(from.starter());
    }
    if (from.has_estop()) {
      set_estop(from.estop());
    }
  }
}

void Status::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:snd_msgs.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Status::CopyFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snd_msgs.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Status::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  if (has_pose()) {
    if (!this->pose_->IsInitialized()) return false;
  }
  if (has_speed()) {
    if (!this->speed_->IsInitialized()) return false;
  }
  if (has_ir()) {
    if (!this->ir_->IsInitialized()) return false;
  }
  if (has_encoders()) {
    if (!this->encoders_->IsInitialized()) return false;
  }
  return true;
}

void Status::Swap(Status* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Status::InternalSwap(Status* other) {
  std::swap(pose_, other->pose_);
  std::swap(speed_, other->speed_);
  std::swap(ir_, other->ir_);
  std::swap(encoders_, other->encoders_);
  std::swap(starter_, other->starter_);
  std::swap(estop_, other->estop_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Status::GetMetadata() const {
  protobuf_CommMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommMsgs_2eproto::file_level_metadata[7];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Status

// required .snd_msgs.Pose pose = 1;
bool Status::has_pose() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Status::set_has_pose() {
  _has_bits_[0] |= 0x00000001u;
}
void Status::clear_has_pose() {
  _has_bits_[0] &= ~0x00000001u;
}
void Status::clear_pose() {
  if (pose_ != NULL) pose_->::snd_msgs::Pose::Clear();
  clear_has_pose();
}
const ::snd_msgs::Pose& Status::pose() const {
  // @@protoc_insertion_point(field_get:snd_msgs.Status.pose)
  return pose_ != NULL ? *pose_
                         : *::snd_msgs::Pose::internal_default_instance();
}
::snd_msgs::Pose* Status::mutable_pose() {
  set_has_pose();
  if (pose_ == NULL) {
    pose_ = new ::snd_msgs::Pose;
  }
  // @@protoc_insertion_point(field_mutable:snd_msgs.Status.pose)
  return pose_;
}
::snd_msgs::Pose* Status::release_pose() {
  // @@protoc_insertion_point(field_release:snd_msgs.Status.pose)
  clear_has_pose();
  ::snd_msgs::Pose* temp = pose_;
  pose_ = NULL;
  return temp;
}
void Status::set_allocated_pose(::snd_msgs::Pose* pose) {
  delete pose_;
  pose_ = pose;
  if (pose) {
    set_has_pose();
  } else {
    clear_has_pose();
  }
  // @@protoc_insertion_point(field_set_allocated:snd_msgs.Status.pose)
}

// required .snd_msgs.Speed speed = 2;
bool Status::has_speed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Status::set_has_speed() {
  _has_bits_[0] |= 0x00000002u;
}
void Status::clear_has_speed() {
  _has_bits_[0] &= ~0x00000002u;
}
void Status::clear_speed() {
  if (speed_ != NULL) speed_->::snd_msgs::Speed::Clear();
  clear_has_speed();
}
const ::snd_msgs::Speed& Status::speed() const {
  // @@protoc_insertion_point(field_get:snd_msgs.Status.speed)
  return speed_ != NULL ? *speed_
                         : *::snd_msgs::Speed::internal_default_instance();
}
::snd_msgs::Speed* Status::mutable_speed() {
  set_has_speed();
  if (speed_ == NULL) {
    speed_ = new ::snd_msgs::Speed;
  }
  // @@protoc_insertion_point(field_mutable:snd_msgs.Status.speed)
  return speed_;
}
::snd_msgs::Speed* Status::release_speed() {
  // @@protoc_insertion_point(field_release:snd_msgs.Status.speed)
  clear_has_speed();
  ::snd_msgs::Speed* temp = speed_;
  speed_ = NULL;
  return temp;
}
void Status::set_allocated_speed(::snd_msgs::Speed* speed) {
  delete speed_;
  speed_ = speed;
  if (speed) {
    set_has_speed();
  } else {
    clear_has_speed();
  }
  // @@protoc_insertion_point(field_set_allocated:snd_msgs.Status.speed)
}

// required bool starter = 3;
bool Status::has_starter() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Status::set_has_starter() {
  _has_bits_[0] |= 0x00000010u;
}
void Status::clear_has_starter() {
  _has_bits_[0] &= ~0x00000010u;
}
void Status::clear_starter() {
  starter_ = false;
  clear_has_starter();
}
bool Status::starter() const {
  // @@protoc_insertion_point(field_get:snd_msgs.Status.starter)
  return starter_;
}
void Status::set_starter(bool value) {
  set_has_starter();
  starter_ = value;
  // @@protoc_insertion_point(field_set:snd_msgs.Status.starter)
}

// required bool estop = 4;
bool Status::has_estop() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Status::set_has_estop() {
  _has_bits_[0] |= 0x00000020u;
}
void Status::clear_has_estop() {
  _has_bits_[0] &= ~0x00000020u;
}
void Status::clear_estop() {
  estop_ = false;
  clear_has_estop();
}
bool Status::estop() const {
  // @@protoc_insertion_point(field_get:snd_msgs.Status.estop)
  return estop_;
}
void Status::set_estop(bool value) {
  set_has_estop();
  estop_ = value;
  // @@protoc_insertion_point(field_set:snd_msgs.Status.estop)
}

// required .snd_msgs.Ir ir = 5;
bool Status::has_ir() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Status::set_has_ir() {
  _has_bits_[0] |= 0x00000004u;
}
void Status::clear_has_ir() {
  _has_bits_[0] &= ~0x00000004u;
}
void Status::clear_ir() {
  if (ir_ != NULL) ir_->::snd_msgs::Ir::Clear();
  clear_has_ir();
}
const ::snd_msgs::Ir& Status::ir() const {
  // @@protoc_insertion_point(field_get:snd_msgs.Status.ir)
  return ir_ != NULL ? *ir_
                         : *::snd_msgs::Ir::internal_default_instance();
}
::snd_msgs::Ir* Status::mutable_ir() {
  set_has_ir();
  if (ir_ == NULL) {
    ir_ = new ::snd_msgs::Ir;
  }
  // @@protoc_insertion_point(field_mutable:snd_msgs.Status.ir)
  return ir_;
}
::snd_msgs::Ir* Status::release_ir() {
  // @@protoc_insertion_point(field_release:snd_msgs.Status.ir)
  clear_has_ir();
  ::snd_msgs::Ir* temp = ir_;
  ir_ = NULL;
  return temp;
}
void Status::set_allocated_ir(::snd_msgs::Ir* ir) {
  delete ir_;
  ir_ = ir;
  if (ir) {
    set_has_ir();
  } else {
    clear_has_ir();
  }
  // @@protoc_insertion_point(field_set_allocated:snd_msgs.Status.ir)
}

// required .snd_msgs.Encoders encoders = 6;
bool Status::has_encoders() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Status::set_has_encoders() {
  _has_bits_[0] |= 0x00000008u;
}
void Status::clear_has_encoders() {
  _has_bits_[0] &= ~0x00000008u;
}
void Status::clear_encoders() {
  if (encoders_ != NULL) encoders_->::snd_msgs::Encoders::Clear();
  clear_has_encoders();
}
const ::snd_msgs::Encoders& Status::encoders() const {
  // @@protoc_insertion_point(field_get:snd_msgs.Status.encoders)
  return encoders_ != NULL ? *encoders_
                         : *::snd_msgs::Encoders::internal_default_instance();
}
::snd_msgs::Encoders* Status::mutable_encoders() {
  set_has_encoders();
  if (encoders_ == NULL) {
    encoders_ = new ::snd_msgs::Encoders;
  }
  // @@protoc_insertion_point(field_mutable:snd_msgs.Status.encoders)
  return encoders_;
}
::snd_msgs::Encoders* Status::release_encoders() {
  // @@protoc_insertion_point(field_release:snd_msgs.Status.encoders)
  clear_has_encoders();
  ::snd_msgs::Encoders* temp = encoders_;
  encoders_ = NULL;
  return temp;
}
void Status::set_allocated_encoders(::snd_msgs::Encoders* encoders) {
  delete encoders_;
  encoders_ = encoders;
  if (encoders) {
    set_has_encoders();
  } else {
    clear_has_encoders();
  }
  // @@protoc_insertion_point(field_set_allocated:snd_msgs.Status.encoders)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Log::kStampFieldNumber;
const int Log::kLevelFieldNumber;
const int Log::kTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Log::Log()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_CommMsgs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:snd_msgs.Log)
}
Log::Log(const Log& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text()) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  ::memcpy(&stamp_, &from.stamp_,
    reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&stamp_) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:snd_msgs.Log)
}

void Log::SharedCtor() {
  _cached_size_ = 0;
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stamp_ = 0u;
  level_ = 1;
}

Log::~Log() {
  // @@protoc_insertion_point(destructor:snd_msgs.Log)
  SharedDtor();
}

void Log::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Log::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Log::descriptor() {
  protobuf_CommMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommMsgs_2eproto::file_level_metadata[8].descriptor;
}

const Log& Log::default_instance() {
  protobuf_CommMsgs_2eproto::InitDefaults();
  return *internal_default_instance();
}

Log* Log::New(::google::protobuf::Arena* arena) const {
  Log* n = new Log;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Log::Clear() {
// @@protoc_insertion_point(message_clear_start:snd_msgs.Log)
  if (has_text()) {
    GOOGLE_DCHECK(!text_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*text_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    stamp_ = 0u;
    level_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Log::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:snd_msgs.Log)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 stamp = 1;
      case 1: {
        if (tag == 8u) {
          set_has_stamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .snd_msgs.Log.eLogLevel level = 2 [default = INFO];
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::snd_msgs::Log_eLogLevel_IsValid(value)) {
            set_level(static_cast< ::snd_msgs::Log_eLogLevel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string text = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "snd_msgs.Log.text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:snd_msgs.Log)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:snd_msgs.Log)
  return false;
#undef DO_
}

void Log::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:snd_msgs.Log)
  // required uint32 stamp = 1;
  if (has_stamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->stamp(), output);
  }

  // required .snd_msgs.Log.eLogLevel level = 2 [default = INFO];
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->level(), output);
  }

  // required string text = 3;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "snd_msgs.Log.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->text(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:snd_msgs.Log)
}

::google::protobuf::uint8* Log::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:snd_msgs.Log)
  // required uint32 stamp = 1;
  if (has_stamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->stamp(), target);
  }

  // required .snd_msgs.Log.eLogLevel level = 2 [default = INFO];
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->level(), target);
  }

  // required string text = 3;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "snd_msgs.Log.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->text(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snd_msgs.Log)
  return target;
}

size_t Log::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:snd_msgs.Log)
  size_t total_size = 0;

  if (has_text()) {
    // required string text = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());
  }

  if (has_stamp()) {
    // required uint32 stamp = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->stamp());
  }

  if (has_level()) {
    // required .snd_msgs.Log.eLogLevel level = 2 [default = INFO];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->level());
  }

  return total_size;
}
size_t Log::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snd_msgs.Log)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string text = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());

    // required uint32 stamp = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->stamp());

    // required .snd_msgs.Log.eLogLevel level = 2 [default = INFO];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->level());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Log::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:snd_msgs.Log)
  GOOGLE_DCHECK_NE(&from, this);
  const Log* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Log>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:snd_msgs.Log)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:snd_msgs.Log)
    MergeFrom(*source);
  }
}

void Log::MergeFrom(const Log& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:snd_msgs.Log)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_text()) {
      set_has_text();
      text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
    }
    if (from.has_stamp()) {
      set_stamp(from.stamp());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
}

void Log::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:snd_msgs.Log)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Log::CopyFrom(const Log& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snd_msgs.Log)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Log::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void Log::Swap(Log* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Log::InternalSwap(Log* other) {
  text_.Swap(&other->text_);
  std::swap(stamp_, other->stamp_);
  std::swap(level_, other->level_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Log::GetMetadata() const {
  protobuf_CommMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommMsgs_2eproto::file_level_metadata[8];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Log

// required uint32 stamp = 1;
bool Log::has_stamp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Log::set_has_stamp() {
  _has_bits_[0] |= 0x00000002u;
}
void Log::clear_has_stamp() {
  _has_bits_[0] &= ~0x00000002u;
}
void Log::clear_stamp() {
  stamp_ = 0u;
  clear_has_stamp();
}
::google::protobuf::uint32 Log::stamp() const {
  // @@protoc_insertion_point(field_get:snd_msgs.Log.stamp)
  return stamp_;
}
void Log::set_stamp(::google::protobuf::uint32 value) {
  set_has_stamp();
  stamp_ = value;
  // @@protoc_insertion_point(field_set:snd_msgs.Log.stamp)
}

// required .snd_msgs.Log.eLogLevel level = 2 [default = INFO];
bool Log::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Log::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
void Log::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
void Log::clear_level() {
  level_ = 1;
  clear_has_level();
}
::snd_msgs::Log_eLogLevel Log::level() const {
  // @@protoc_insertion_point(field_get:snd_msgs.Log.level)
  return static_cast< ::snd_msgs::Log_eLogLevel >(level_);
}
void Log::set_level(::snd_msgs::Log_eLogLevel value) {
  assert(::snd_msgs::Log_eLogLevel_IsValid(value));
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:snd_msgs.Log.level)
}

// required string text = 3;
bool Log::has_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Log::set_has_text() {
  _has_bits_[0] |= 0x00000001u;
}
void Log::clear_has_text() {
  _has_bits_[0] &= ~0x00000001u;
}
void Log::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
const ::std::string& Log::text() const {
  // @@protoc_insertion_point(field_get:snd_msgs.Log.text)
  return text_.GetNoArena();
}
void Log::set_text(const ::std::string& value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:snd_msgs.Log.text)
}
#if LANG_CXX11
void Log::set_text(::std::string&& value) {
  set_has_text();
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:snd_msgs.Log.text)
}
#endif
void Log::set_text(const char* value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:snd_msgs.Log.text)
}
void Log::set_text(const char* value, size_t size) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:snd_msgs.Log.text)
}
::std::string* Log::mutable_text() {
  set_has_text();
  // @@protoc_insertion_point(field_mutable:snd_msgs.Log.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Log::release_text() {
  // @@protoc_insertion_point(field_release:snd_msgs.Log.text)
  clear_has_text();
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Log::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:snd_msgs.Log.text)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SerialRequest::kGetStatusFieldNumber;
const int SerialRequest::kGetEncodersFieldNumber;
const int SerialRequest::kGetPositionFieldNumber;
const int SerialRequest::kGetMotorsSpeedFieldNumber;
const int SerialRequest::kGetPidSpeedLeftFieldNumber;
const int SerialRequest::kGetPidSpeedRightFieldNumber;
const int SerialRequest::kGetStarterStateFieldNumber;
const int SerialRequest::kSetMotorsSpeedFieldNumber;
const int SerialRequest::kSetPidSpeedLeftFieldNumber;
const int SerialRequest::kSetPidSpeedRightFieldNumber;
const int SerialRequest::kSetEncodersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SerialRequest::SerialRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_CommMsgs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:snd_msgs.SerialRequest)
}
SerialRequest::SerialRequest(const SerialRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_type();
  switch (from.type_case()) {
    case kGetStatus: {
      mutable_getstatus()->::snd_msgs::EmptyMsg::MergeFrom(from.getstatus());
      break;
    }
    case kGetEncoders: {
      mutable_getencoders()->::snd_msgs::EmptyMsg::MergeFrom(from.getencoders());
      break;
    }
    case kGetPosition: {
      mutable_getposition()->::snd_msgs::EmptyMsg::MergeFrom(from.getposition());
      break;
    }
    case kGetMotorsSpeed: {
      mutable_getmotorsspeed()->::snd_msgs::EmptyMsg::MergeFrom(from.getmotorsspeed());
      break;
    }
    case kGetPidSpeedLeft: {
      mutable_getpidspeedleft()->::snd_msgs::EmptyMsg::MergeFrom(from.getpidspeedleft());
      break;
    }
    case kGetPidSpeedRight: {
      mutable_getpidspeedright()->::snd_msgs::EmptyMsg::MergeFrom(from.getpidspeedright());
      break;
    }
    case kGetStarterState: {
      mutable_getstarterstate()->::snd_msgs::EmptyMsg::MergeFrom(from.getstarterstate());
      break;
    }
    case kSetMotorsSpeed: {
      mutable_setmotorsspeed()->::snd_msgs::Speed::MergeFrom(from.setmotorsspeed());
      break;
    }
    case kSetPidSpeedLeft: {
      mutable_setpidspeedleft()->::snd_msgs::PidTunings::MergeFrom(from.setpidspeedleft());
      break;
    }
    case kSetPidSpeedRight: {
      mutable_setpidspeedright()->::snd_msgs::PidTunings::MergeFrom(from.setpidspeedright());
      break;
    }
    case kSetEncoders: {
      mutable_setencoders()->::snd_msgs::Encoders::MergeFrom(from.setencoders());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:snd_msgs.SerialRequest)
}

void SerialRequest::SharedCtor() {
  _cached_size_ = 0;
  clear_has_type();
}

SerialRequest::~SerialRequest() {
  // @@protoc_insertion_point(destructor:snd_msgs.SerialRequest)
  SharedDtor();
}

void SerialRequest::SharedDtor() {
  if (has_type()) {
    clear_type();
  }
}

void SerialRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SerialRequest::descriptor() {
  protobuf_CommMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommMsgs_2eproto::file_level_metadata[9].descriptor;
}

const SerialRequest& SerialRequest::default_instance() {
  protobuf_CommMsgs_2eproto::InitDefaults();
  return *internal_default_instance();
}

SerialRequest* SerialRequest::New(::google::protobuf::Arena* arena) const {
  SerialRequest* n = new SerialRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SerialRequest::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:snd_msgs.SerialRequest)
  switch (type_case()) {
    case kGetStatus: {
      delete type_.getstatus_;
      break;
    }
    case kGetEncoders: {
      delete type_.getencoders_;
      break;
    }
    case kGetPosition: {
      delete type_.getposition_;
      break;
    }
    case kGetMotorsSpeed: {
      delete type_.getmotorsspeed_;
      break;
    }
    case kGetPidSpeedLeft: {
      delete type_.getpidspeedleft_;
      break;
    }
    case kGetPidSpeedRight: {
      delete type_.getpidspeedright_;
      break;
    }
    case kGetStarterState: {
      delete type_.getstarterstate_;
      break;
    }
    case kSetMotorsSpeed: {
      delete type_.setmotorsspeed_;
      break;
    }
    case kSetPidSpeedLeft: {
      delete type_.setpidspeedleft_;
      break;
    }
    case kSetPidSpeedRight: {
      delete type_.setpidspeedright_;
      break;
    }
    case kSetEncoders: {
      delete type_.setencoders_;
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void SerialRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:snd_msgs.SerialRequest)
  clear_type();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SerialRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:snd_msgs.SerialRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .snd_msgs.EmptyMsg getStatus = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getstatus()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .snd_msgs.EmptyMsg getEncoders = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getencoders()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .snd_msgs.EmptyMsg getPosition = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getposition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .snd_msgs.EmptyMsg getMotorsSpeed = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getmotorsspeed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .snd_msgs.EmptyMsg getPidSpeedLeft = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getpidspeedleft()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .snd_msgs.EmptyMsg getPidSpeedRight = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getpidspeedright()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .snd_msgs.EmptyMsg getStarterState = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getstarterstate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .snd_msgs.Speed setMotorsSpeed = 10;
      case 10: {
        if (tag == 82u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_setmotorsspeed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .snd_msgs.PidTunings setPidSpeedLeft = 11;
      case 11: {
        if (tag == 90u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_setpidspeedleft()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .snd_msgs.PidTunings setPidSpeedRight = 12;
      case 12: {
        if (tag == 98u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_setpidspeedright()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .snd_msgs.Encoders setEncoders = 13;
      case 13: {
        if (tag == 106u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_setencoders()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:snd_msgs.SerialRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:snd_msgs.SerialRequest)
  return false;
#undef DO_
}

void SerialRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:snd_msgs.SerialRequest)
  switch (type_case()) {
    case kGetStatus:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, *type_.getstatus_, output);
      break;
    case kGetEncoders:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, *type_.getencoders_, output);
      break;
    case kGetPosition:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, *type_.getposition_, output);
      break;
    case kGetMotorsSpeed:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        4, *type_.getmotorsspeed_, output);
      break;
    case kGetPidSpeedLeft:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        5, *type_.getpidspeedleft_, output);
      break;
    case kGetPidSpeedRight:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        6, *type_.getpidspeedright_, output);
      break;
    case kGetStarterState:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        7, *type_.getstarterstate_, output);
      break;
    case kSetMotorsSpeed:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        10, *type_.setmotorsspeed_, output);
      break;
    case kSetPidSpeedLeft:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        11, *type_.setpidspeedleft_, output);
      break;
    case kSetPidSpeedRight:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        12, *type_.setpidspeedright_, output);
      break;
    case kSetEncoders:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        13, *type_.setencoders_, output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:snd_msgs.SerialRequest)
}

::google::protobuf::uint8* SerialRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:snd_msgs.SerialRequest)
  switch (type_case()) {
    case kGetStatus:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          1, *type_.getstatus_, false, target);
      break;
    case kGetEncoders:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          2, *type_.getencoders_, false, target);
      break;
    case kGetPosition:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          3, *type_.getposition_, false, target);
      break;
    case kGetMotorsSpeed:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          4, *type_.getmotorsspeed_, false, target);
      break;
    case kGetPidSpeedLeft:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          5, *type_.getpidspeedleft_, false, target);
      break;
    case kGetPidSpeedRight:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          6, *type_.getpidspeedright_, false, target);
      break;
    case kGetStarterState:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          7, *type_.getstarterstate_, false, target);
      break;
    case kSetMotorsSpeed:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          10, *type_.setmotorsspeed_, false, target);
      break;
    case kSetPidSpeedLeft:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          11, *type_.setpidspeedleft_, false, target);
      break;
    case kSetPidSpeedRight:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          12, *type_.setpidspeedright_, false, target);
      break;
    case kSetEncoders:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          13, *type_.setencoders_, false, target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snd_msgs.SerialRequest)
  return target;
}

size_t SerialRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snd_msgs.SerialRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  switch (type_case()) {
    // optional .snd_msgs.EmptyMsg getStatus = 1;
    case kGetStatus: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.getstatus_);
      break;
    }
    // optional .snd_msgs.EmptyMsg getEncoders = 2;
    case kGetEncoders: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.getencoders_);
      break;
    }
    // optional .snd_msgs.EmptyMsg getPosition = 3;
    case kGetPosition: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.getposition_);
      break;
    }
    // optional .snd_msgs.EmptyMsg getMotorsSpeed = 4;
    case kGetMotorsSpeed: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.getmotorsspeed_);
      break;
    }
    // optional .snd_msgs.EmptyMsg getPidSpeedLeft = 5;
    case kGetPidSpeedLeft: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.getpidspeedleft_);
      break;
    }
    // optional .snd_msgs.EmptyMsg getPidSpeedRight = 6;
    case kGetPidSpeedRight: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.getpidspeedright_);
      break;
    }
    // optional .snd_msgs.EmptyMsg getStarterState = 7;
    case kGetStarterState: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.getstarterstate_);
      break;
    }
    // optional .snd_msgs.Speed setMotorsSpeed = 10;
    case kSetMotorsSpeed: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.setmotorsspeed_);
      break;
    }
    // optional .snd_msgs.PidTunings setPidSpeedLeft = 11;
    case kSetPidSpeedLeft: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.setpidspeedleft_);
      break;
    }
    // optional .snd_msgs.PidTunings setPidSpeedRight = 12;
    case kSetPidSpeedRight: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.setpidspeedright_);
      break;
    }
    // optional .snd_msgs.Encoders setEncoders = 13;
    case kSetEncoders: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.setencoders_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SerialRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:snd_msgs.SerialRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SerialRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SerialRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:snd_msgs.SerialRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:snd_msgs.SerialRequest)
    MergeFrom(*source);
  }
}

void SerialRequest::MergeFrom(const SerialRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:snd_msgs.SerialRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  switch (from.type_case()) {
    case kGetStatus: {
      mutable_getstatus()->::snd_msgs::EmptyMsg::MergeFrom(from.getstatus());
      break;
    }
    case kGetEncoders: {
      mutable_getencoders()->::snd_msgs::EmptyMsg::MergeFrom(from.getencoders());
      break;
    }
    case kGetPosition: {
      mutable_getposition()->::snd_msgs::EmptyMsg::MergeFrom(from.getposition());
      break;
    }
    case kGetMotorsSpeed: {
      mutable_getmotorsspeed()->::snd_msgs::EmptyMsg::MergeFrom(from.getmotorsspeed());
      break;
    }
    case kGetPidSpeedLeft: {
      mutable_getpidspeedleft()->::snd_msgs::EmptyMsg::MergeFrom(from.getpidspeedleft());
      break;
    }
    case kGetPidSpeedRight: {
      mutable_getpidspeedright()->::snd_msgs::EmptyMsg::MergeFrom(from.getpidspeedright());
      break;
    }
    case kGetStarterState: {
      mutable_getstarterstate()->::snd_msgs::EmptyMsg::MergeFrom(from.getstarterstate());
      break;
    }
    case kSetMotorsSpeed: {
      mutable_setmotorsspeed()->::snd_msgs::Speed::MergeFrom(from.setmotorsspeed());
      break;
    }
    case kSetPidSpeedLeft: {
      mutable_setpidspeedleft()->::snd_msgs::PidTunings::MergeFrom(from.setpidspeedleft());
      break;
    }
    case kSetPidSpeedRight: {
      mutable_setpidspeedright()->::snd_msgs::PidTunings::MergeFrom(from.setpidspeedright());
      break;
    }
    case kSetEncoders: {
      mutable_setencoders()->::snd_msgs::Encoders::MergeFrom(from.setencoders());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
}

void SerialRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:snd_msgs.SerialRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SerialRequest::CopyFrom(const SerialRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snd_msgs.SerialRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerialRequest::IsInitialized() const {
  switch (type_case()) {
    case kGetStatus: {
      break;
    }
    case kGetEncoders: {
      break;
    }
    case kGetPosition: {
      break;
    }
    case kGetMotorsSpeed: {
      break;
    }
    case kGetPidSpeedLeft: {
      break;
    }
    case kGetPidSpeedRight: {
      break;
    }
    case kGetStarterState: {
      break;
    }
    case kSetMotorsSpeed: {
      if (has_setmotorsspeed()) {
        if (!this->setmotorsspeed().IsInitialized()) return false;
      }
      break;
    }
    case kSetPidSpeedLeft: {
      if (has_setpidspeedleft()) {
        if (!this->setpidspeedleft().IsInitialized()) return false;
      }
      break;
    }
    case kSetPidSpeedRight: {
      if (has_setpidspeedright()) {
        if (!this->setpidspeedright().IsInitialized()) return false;
      }
      break;
    }
    case kSetEncoders: {
      if (has_setencoders()) {
        if (!this->setencoders().IsInitialized()) return false;
      }
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  return true;
}

void SerialRequest::Swap(SerialRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SerialRequest::InternalSwap(SerialRequest* other) {
  std::swap(type_, other->type_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SerialRequest::GetMetadata() const {
  protobuf_CommMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommMsgs_2eproto::file_level_metadata[9];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SerialRequest

// optional .snd_msgs.EmptyMsg getStatus = 1;
bool SerialRequest::has_getstatus() const {
  return type_case() == kGetStatus;
}
void SerialRequest::set_has_getstatus() {
  _oneof_case_[0] = kGetStatus;
}
void SerialRequest::clear_getstatus() {
  if (has_getstatus()) {
    delete type_.getstatus_;
    clear_has_type();
  }
}
 const ::snd_msgs::EmptyMsg& SerialRequest::getstatus() const {
  // @@protoc_insertion_point(field_get:snd_msgs.SerialRequest.getStatus)
  return has_getstatus()
      ? *type_.getstatus_
      : ::snd_msgs::EmptyMsg::default_instance();
}
::snd_msgs::EmptyMsg* SerialRequest::mutable_getstatus() {
  if (!has_getstatus()) {
    clear_type();
    set_has_getstatus();
    type_.getstatus_ = new ::snd_msgs::EmptyMsg;
  }
  // @@protoc_insertion_point(field_mutable:snd_msgs.SerialRequest.getStatus)
  return type_.getstatus_;
}
::snd_msgs::EmptyMsg* SerialRequest::release_getstatus() {
  // @@protoc_insertion_point(field_release:snd_msgs.SerialRequest.getStatus)
  if (has_getstatus()) {
    clear_has_type();
    ::snd_msgs::EmptyMsg* temp = type_.getstatus_;
    type_.getstatus_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SerialRequest::set_allocated_getstatus(::snd_msgs::EmptyMsg* getstatus) {
  clear_type();
  if (getstatus) {
    set_has_getstatus();
    type_.getstatus_ = getstatus;
  }
  // @@protoc_insertion_point(field_set_allocated:snd_msgs.SerialRequest.getStatus)
}

// optional .snd_msgs.EmptyMsg getEncoders = 2;
bool SerialRequest::has_getencoders() const {
  return type_case() == kGetEncoders;
}
void SerialRequest::set_has_getencoders() {
  _oneof_case_[0] = kGetEncoders;
}
void SerialRequest::clear_getencoders() {
  if (has_getencoders()) {
    delete type_.getencoders_;
    clear_has_type();
  }
}
 const ::snd_msgs::EmptyMsg& SerialRequest::getencoders() const {
  // @@protoc_insertion_point(field_get:snd_msgs.SerialRequest.getEncoders)
  return has_getencoders()
      ? *type_.getencoders_
      : ::snd_msgs::EmptyMsg::default_instance();
}
::snd_msgs::EmptyMsg* SerialRequest::mutable_getencoders() {
  if (!has_getencoders()) {
    clear_type();
    set_has_getencoders();
    type_.getencoders_ = new ::snd_msgs::EmptyMsg;
  }
  // @@protoc_insertion_point(field_mutable:snd_msgs.SerialRequest.getEncoders)
  return type_.getencoders_;
}
::snd_msgs::EmptyMsg* SerialRequest::release_getencoders() {
  // @@protoc_insertion_point(field_release:snd_msgs.SerialRequest.getEncoders)
  if (has_getencoders()) {
    clear_has_type();
    ::snd_msgs::EmptyMsg* temp = type_.getencoders_;
    type_.getencoders_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SerialRequest::set_allocated_getencoders(::snd_msgs::EmptyMsg* getencoders) {
  clear_type();
  if (getencoders) {
    set_has_getencoders();
    type_.getencoders_ = getencoders;
  }
  // @@protoc_insertion_point(field_set_allocated:snd_msgs.SerialRequest.getEncoders)
}

// optional .snd_msgs.EmptyMsg getPosition = 3;
bool SerialRequest::has_getposition() const {
  return type_case() == kGetPosition;
}
void SerialRequest::set_has_getposition() {
  _oneof_case_[0] = kGetPosition;
}
void SerialRequest::clear_getposition() {
  if (has_getposition()) {
    delete type_.getposition_;
    clear_has_type();
  }
}
 const ::snd_msgs::EmptyMsg& SerialRequest::getposition() const {
  // @@protoc_insertion_point(field_get:snd_msgs.SerialRequest.getPosition)
  return has_getposition()
      ? *type_.getposition_
      : ::snd_msgs::EmptyMsg::default_instance();
}
::snd_msgs::EmptyMsg* SerialRequest::mutable_getposition() {
  if (!has_getposition()) {
    clear_type();
    set_has_getposition();
    type_.getposition_ = new ::snd_msgs::EmptyMsg;
  }
  // @@protoc_insertion_point(field_mutable:snd_msgs.SerialRequest.getPosition)
  return type_.getposition_;
}
::snd_msgs::EmptyMsg* SerialRequest::release_getposition() {
  // @@protoc_insertion_point(field_release:snd_msgs.SerialRequest.getPosition)
  if (has_getposition()) {
    clear_has_type();
    ::snd_msgs::EmptyMsg* temp = type_.getposition_;
    type_.getposition_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SerialRequest::set_allocated_getposition(::snd_msgs::EmptyMsg* getposition) {
  clear_type();
  if (getposition) {
    set_has_getposition();
    type_.getposition_ = getposition;
  }
  // @@protoc_insertion_point(field_set_allocated:snd_msgs.SerialRequest.getPosition)
}

// optional .snd_msgs.EmptyMsg getMotorsSpeed = 4;
bool SerialRequest::has_getmotorsspeed() const {
  return type_case() == kGetMotorsSpeed;
}
void SerialRequest::set_has_getmotorsspeed() {
  _oneof_case_[0] = kGetMotorsSpeed;
}
void SerialRequest::clear_getmotorsspeed() {
  if (has_getmotorsspeed()) {
    delete type_.getmotorsspeed_;
    clear_has_type();
  }
}
 const ::snd_msgs::EmptyMsg& SerialRequest::getmotorsspeed() const {
  // @@protoc_insertion_point(field_get:snd_msgs.SerialRequest.getMotorsSpeed)
  return has_getmotorsspeed()
      ? *type_.getmotorsspeed_
      : ::snd_msgs::EmptyMsg::default_instance();
}
::snd_msgs::EmptyMsg* SerialRequest::mutable_getmotorsspeed() {
  if (!has_getmotorsspeed()) {
    clear_type();
    set_has_getmotorsspeed();
    type_.getmotorsspeed_ = new ::snd_msgs::EmptyMsg;
  }
  // @@protoc_insertion_point(field_mutable:snd_msgs.SerialRequest.getMotorsSpeed)
  return type_.getmotorsspeed_;
}
::snd_msgs::EmptyMsg* SerialRequest::release_getmotorsspeed() {
  // @@protoc_insertion_point(field_release:snd_msgs.SerialRequest.getMotorsSpeed)
  if (has_getmotorsspeed()) {
    clear_has_type();
    ::snd_msgs::EmptyMsg* temp = type_.getmotorsspeed_;
    type_.getmotorsspeed_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SerialRequest::set_allocated_getmotorsspeed(::snd_msgs::EmptyMsg* getmotorsspeed) {
  clear_type();
  if (getmotorsspeed) {
    set_has_getmotorsspeed();
    type_.getmotorsspeed_ = getmotorsspeed;
  }
  // @@protoc_insertion_point(field_set_allocated:snd_msgs.SerialRequest.getMotorsSpeed)
}

// optional .snd_msgs.EmptyMsg getPidSpeedLeft = 5;
bool SerialRequest::has_getpidspeedleft() const {
  return type_case() == kGetPidSpeedLeft;
}
void SerialRequest::set_has_getpidspeedleft() {
  _oneof_case_[0] = kGetPidSpeedLeft;
}
void SerialRequest::clear_getpidspeedleft() {
  if (has_getpidspeedleft()) {
    delete type_.getpidspeedleft_;
    clear_has_type();
  }
}
 const ::snd_msgs::EmptyMsg& SerialRequest::getpidspeedleft() const {
  // @@protoc_insertion_point(field_get:snd_msgs.SerialRequest.getPidSpeedLeft)
  return has_getpidspeedleft()
      ? *type_.getpidspeedleft_
      : ::snd_msgs::EmptyMsg::default_instance();
}
::snd_msgs::EmptyMsg* SerialRequest::mutable_getpidspeedleft() {
  if (!has_getpidspeedleft()) {
    clear_type();
    set_has_getpidspeedleft();
    type_.getpidspeedleft_ = new ::snd_msgs::EmptyMsg;
  }
  // @@protoc_insertion_point(field_mutable:snd_msgs.SerialRequest.getPidSpeedLeft)
  return type_.getpidspeedleft_;
}
::snd_msgs::EmptyMsg* SerialRequest::release_getpidspeedleft() {
  // @@protoc_insertion_point(field_release:snd_msgs.SerialRequest.getPidSpeedLeft)
  if (has_getpidspeedleft()) {
    clear_has_type();
    ::snd_msgs::EmptyMsg* temp = type_.getpidspeedleft_;
    type_.getpidspeedleft_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SerialRequest::set_allocated_getpidspeedleft(::snd_msgs::EmptyMsg* getpidspeedleft) {
  clear_type();
  if (getpidspeedleft) {
    set_has_getpidspeedleft();
    type_.getpidspeedleft_ = getpidspeedleft;
  }
  // @@protoc_insertion_point(field_set_allocated:snd_msgs.SerialRequest.getPidSpeedLeft)
}

// optional .snd_msgs.EmptyMsg getPidSpeedRight = 6;
bool SerialRequest::has_getpidspeedright() const {
  return type_case() == kGetPidSpeedRight;
}
void SerialRequest::set_has_getpidspeedright() {
  _oneof_case_[0] = kGetPidSpeedRight;
}
void SerialRequest::clear_getpidspeedright() {
  if (has_getpidspeedright()) {
    delete type_.getpidspeedright_;
    clear_has_type();
  }
}
 const ::snd_msgs::EmptyMsg& SerialRequest::getpidspeedright() const {
  // @@protoc_insertion_point(field_get:snd_msgs.SerialRequest.getPidSpeedRight)
  return has_getpidspeedright()
      ? *type_.getpidspeedright_
      : ::snd_msgs::EmptyMsg::default_instance();
}
::snd_msgs::EmptyMsg* SerialRequest::mutable_getpidspeedright() {
  if (!has_getpidspeedright()) {
    clear_type();
    set_has_getpidspeedright();
    type_.getpidspeedright_ = new ::snd_msgs::EmptyMsg;
  }
  // @@protoc_insertion_point(field_mutable:snd_msgs.SerialRequest.getPidSpeedRight)
  return type_.getpidspeedright_;
}
::snd_msgs::EmptyMsg* SerialRequest::release_getpidspeedright() {
  // @@protoc_insertion_point(field_release:snd_msgs.SerialRequest.getPidSpeedRight)
  if (has_getpidspeedright()) {
    clear_has_type();
    ::snd_msgs::EmptyMsg* temp = type_.getpidspeedright_;
    type_.getpidspeedright_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SerialRequest::set_allocated_getpidspeedright(::snd_msgs::EmptyMsg* getpidspeedright) {
  clear_type();
  if (getpidspeedright) {
    set_has_getpidspeedright();
    type_.getpidspeedright_ = getpidspeedright;
  }
  // @@protoc_insertion_point(field_set_allocated:snd_msgs.SerialRequest.getPidSpeedRight)
}

// optional .snd_msgs.EmptyMsg getStarterState = 7;
bool SerialRequest::has_getstarterstate() const {
  return type_case() == kGetStarterState;
}
void SerialRequest::set_has_getstarterstate() {
  _oneof_case_[0] = kGetStarterState;
}
void SerialRequest::clear_getstarterstate() {
  if (has_getstarterstate()) {
    delete type_.getstarterstate_;
    clear_has_type();
  }
}
 const ::snd_msgs::EmptyMsg& SerialRequest::getstarterstate() const {
  // @@protoc_insertion_point(field_get:snd_msgs.SerialRequest.getStarterState)
  return has_getstarterstate()
      ? *type_.getstarterstate_
      : ::snd_msgs::EmptyMsg::default_instance();
}
::snd_msgs::EmptyMsg* SerialRequest::mutable_getstarterstate() {
  if (!has_getstarterstate()) {
    clear_type();
    set_has_getstarterstate();
    type_.getstarterstate_ = new ::snd_msgs::EmptyMsg;
  }
  // @@protoc_insertion_point(field_mutable:snd_msgs.SerialRequest.getStarterState)
  return type_.getstarterstate_;
}
::snd_msgs::EmptyMsg* SerialRequest::release_getstarterstate() {
  // @@protoc_insertion_point(field_release:snd_msgs.SerialRequest.getStarterState)
  if (has_getstarterstate()) {
    clear_has_type();
    ::snd_msgs::EmptyMsg* temp = type_.getstarterstate_;
    type_.getstarterstate_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SerialRequest::set_allocated_getstarterstate(::snd_msgs::EmptyMsg* getstarterstate) {
  clear_type();
  if (getstarterstate) {
    set_has_getstarterstate();
    type_.getstarterstate_ = getstarterstate;
  }
  // @@protoc_insertion_point(field_set_allocated:snd_msgs.SerialRequest.getStarterState)
}

// optional .snd_msgs.Speed setMotorsSpeed = 10;
bool SerialRequest::has_setmotorsspeed() const {
  return type_case() == kSetMotorsSpeed;
}
void SerialRequest::set_has_setmotorsspeed() {
  _oneof_case_[0] = kSetMotorsSpeed;
}
void SerialRequest::clear_setmotorsspeed() {
  if (has_setmotorsspeed()) {
    delete type_.setmotorsspeed_;
    clear_has_type();
  }
}
 const ::snd_msgs::Speed& SerialRequest::setmotorsspeed() const {
  // @@protoc_insertion_point(field_get:snd_msgs.SerialRequest.setMotorsSpeed)
  return has_setmotorsspeed()
      ? *type_.setmotorsspeed_
      : ::snd_msgs::Speed::default_instance();
}
::snd_msgs::Speed* SerialRequest::mutable_setmotorsspeed() {
  if (!has_setmotorsspeed()) {
    clear_type();
    set_has_setmotorsspeed();
    type_.setmotorsspeed_ = new ::snd_msgs::Speed;
  }
  // @@protoc_insertion_point(field_mutable:snd_msgs.SerialRequest.setMotorsSpeed)
  return type_.setmotorsspeed_;
}
::snd_msgs::Speed* SerialRequest::release_setmotorsspeed() {
  // @@protoc_insertion_point(field_release:snd_msgs.SerialRequest.setMotorsSpeed)
  if (has_setmotorsspeed()) {
    clear_has_type();
    ::snd_msgs::Speed* temp = type_.setmotorsspeed_;
    type_.setmotorsspeed_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SerialRequest::set_allocated_setmotorsspeed(::snd_msgs::Speed* setmotorsspeed) {
  clear_type();
  if (setmotorsspeed) {
    set_has_setmotorsspeed();
    type_.setmotorsspeed_ = setmotorsspeed;
  }
  // @@protoc_insertion_point(field_set_allocated:snd_msgs.SerialRequest.setMotorsSpeed)
}

// optional .snd_msgs.PidTunings setPidSpeedLeft = 11;
bool SerialRequest::has_setpidspeedleft() const {
  return type_case() == kSetPidSpeedLeft;
}
void SerialRequest::set_has_setpidspeedleft() {
  _oneof_case_[0] = kSetPidSpeedLeft;
}
void SerialRequest::clear_setpidspeedleft() {
  if (has_setpidspeedleft()) {
    delete type_.setpidspeedleft_;
    clear_has_type();
  }
}
 const ::snd_msgs::PidTunings& SerialRequest::setpidspeedleft() const {
  // @@protoc_insertion_point(field_get:snd_msgs.SerialRequest.setPidSpeedLeft)
  return has_setpidspeedleft()
      ? *type_.setpidspeedleft_
      : ::snd_msgs::PidTunings::default_instance();
}
::snd_msgs::PidTunings* SerialRequest::mutable_setpidspeedleft() {
  if (!has_setpidspeedleft()) {
    clear_type();
    set_has_setpidspeedleft();
    type_.setpidspeedleft_ = new ::snd_msgs::PidTunings;
  }
  // @@protoc_insertion_point(field_mutable:snd_msgs.SerialRequest.setPidSpeedLeft)
  return type_.setpidspeedleft_;
}
::snd_msgs::PidTunings* SerialRequest::release_setpidspeedleft() {
  // @@protoc_insertion_point(field_release:snd_msgs.SerialRequest.setPidSpeedLeft)
  if (has_setpidspeedleft()) {
    clear_has_type();
    ::snd_msgs::PidTunings* temp = type_.setpidspeedleft_;
    type_.setpidspeedleft_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SerialRequest::set_allocated_setpidspeedleft(::snd_msgs::PidTunings* setpidspeedleft) {
  clear_type();
  if (setpidspeedleft) {
    set_has_setpidspeedleft();
    type_.setpidspeedleft_ = setpidspeedleft;
  }
  // @@protoc_insertion_point(field_set_allocated:snd_msgs.SerialRequest.setPidSpeedLeft)
}

// optional .snd_msgs.PidTunings setPidSpeedRight = 12;
bool SerialRequest::has_setpidspeedright() const {
  return type_case() == kSetPidSpeedRight;
}
void SerialRequest::set_has_setpidspeedright() {
  _oneof_case_[0] = kSetPidSpeedRight;
}
void SerialRequest::clear_setpidspeedright() {
  if (has_setpidspeedright()) {
    delete type_.setpidspeedright_;
    clear_has_type();
  }
}
 const ::snd_msgs::PidTunings& SerialRequest::setpidspeedright() const {
  // @@protoc_insertion_point(field_get:snd_msgs.SerialRequest.setPidSpeedRight)
  return has_setpidspeedright()
      ? *type_.setpidspeedright_
      : ::snd_msgs::PidTunings::default_instance();
}
::snd_msgs::PidTunings* SerialRequest::mutable_setpidspeedright() {
  if (!has_setpidspeedright()) {
    clear_type();
    set_has_setpidspeedright();
    type_.setpidspeedright_ = new ::snd_msgs::PidTunings;
  }
  // @@protoc_insertion_point(field_mutable:snd_msgs.SerialRequest.setPidSpeedRight)
  return type_.setpidspeedright_;
}
::snd_msgs::PidTunings* SerialRequest::release_setpidspeedright() {
  // @@protoc_insertion_point(field_release:snd_msgs.SerialRequest.setPidSpeedRight)
  if (has_setpidspeedright()) {
    clear_has_type();
    ::snd_msgs::PidTunings* temp = type_.setpidspeedright_;
    type_.setpidspeedright_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SerialRequest::set_allocated_setpidspeedright(::snd_msgs::PidTunings* setpidspeedright) {
  clear_type();
  if (setpidspeedright) {
    set_has_setpidspeedright();
    type_.setpidspeedright_ = setpidspeedright;
  }
  // @@protoc_insertion_point(field_set_allocated:snd_msgs.SerialRequest.setPidSpeedRight)
}

// optional .snd_msgs.Encoders setEncoders = 13;
bool SerialRequest::has_setencoders() const {
  return type_case() == kSetEncoders;
}
void SerialRequest::set_has_setencoders() {
  _oneof_case_[0] = kSetEncoders;
}
void SerialRequest::clear_setencoders() {
  if (has_setencoders()) {
    delete type_.setencoders_;
    clear_has_type();
  }
}
 const ::snd_msgs::Encoders& SerialRequest::setencoders() const {
  // @@protoc_insertion_point(field_get:snd_msgs.SerialRequest.setEncoders)
  return has_setencoders()
      ? *type_.setencoders_
      : ::snd_msgs::Encoders::default_instance();
}
::snd_msgs::Encoders* SerialRequest::mutable_setencoders() {
  if (!has_setencoders()) {
    clear_type();
    set_has_setencoders();
    type_.setencoders_ = new ::snd_msgs::Encoders;
  }
  // @@protoc_insertion_point(field_mutable:snd_msgs.SerialRequest.setEncoders)
  return type_.setencoders_;
}
::snd_msgs::Encoders* SerialRequest::release_setencoders() {
  // @@protoc_insertion_point(field_release:snd_msgs.SerialRequest.setEncoders)
  if (has_setencoders()) {
    clear_has_type();
    ::snd_msgs::Encoders* temp = type_.setencoders_;
    type_.setencoders_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SerialRequest::set_allocated_setencoders(::snd_msgs::Encoders* setencoders) {
  clear_type();
  if (setencoders) {
    set_has_setencoders();
    type_.setencoders_ = setencoders;
  }
  // @@protoc_insertion_point(field_set_allocated:snd_msgs.SerialRequest.setEncoders)
}

bool SerialRequest::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
void SerialRequest::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
SerialRequest::TypeCase SerialRequest::type_case() const {
  return SerialRequest::TypeCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SerialResponse::kLogFieldNumber;
const int SerialResponse::kEncodersFieldNumber;
const int SerialResponse::kPoseFieldNumber;
const int SerialResponse::kSpeedFieldNumber;
const int SerialResponse::kPidSpeedLeftFieldNumber;
const int SerialResponse::kPidSpeedRightFieldNumber;
const int SerialResponse::kIsStarterSetFieldNumber;
const int SerialResponse::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SerialResponse::SerialResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_CommMsgs_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:snd_msgs.SerialResponse)
}
SerialResponse::SerialResponse(const SerialResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_type();
  switch (from.type_case()) {
    case kLog: {
      mutable_log()->::snd_msgs::Log::MergeFrom(from.log());
      break;
    }
    case kEncoders: {
      mutable_encoders()->::snd_msgs::Encoders::MergeFrom(from.encoders());
      break;
    }
    case kPose: {
      mutable_pose()->::snd_msgs::Pose::MergeFrom(from.pose());
      break;
    }
    case kSpeed: {
      mutable_speed()->::snd_msgs::Speed::MergeFrom(from.speed());
      break;
    }
    case kPidSpeedLeft: {
      mutable_pidspeedleft()->::snd_msgs::PidTunings::MergeFrom(from.pidspeedleft());
      break;
    }
    case kPidSpeedRight: {
      mutable_pidspeedright()->::snd_msgs::PidTunings::MergeFrom(from.pidspeedright());
      break;
    }
    case kIsStarterSet: {
      set_isstarterset(from.isstarterset());
      break;
    }
    case kStatus: {
      mutable_status()->::snd_msgs::Status::MergeFrom(from.status());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:snd_msgs.SerialResponse)
}

void SerialResponse::SharedCtor() {
  _cached_size_ = 0;
  clear_has_type();
}

SerialResponse::~SerialResponse() {
  // @@protoc_insertion_point(destructor:snd_msgs.SerialResponse)
  SharedDtor();
}

void SerialResponse::SharedDtor() {
  if (has_type()) {
    clear_type();
  }
}

void SerialResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SerialResponse::descriptor() {
  protobuf_CommMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommMsgs_2eproto::file_level_metadata[10].descriptor;
}

const SerialResponse& SerialResponse::default_instance() {
  protobuf_CommMsgs_2eproto::InitDefaults();
  return *internal_default_instance();
}

SerialResponse* SerialResponse::New(::google::protobuf::Arena* arena) const {
  SerialResponse* n = new SerialResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SerialResponse::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:snd_msgs.SerialResponse)
  switch (type_case()) {
    case kLog: {
      delete type_.log_;
      break;
    }
    case kEncoders: {
      delete type_.encoders_;
      break;
    }
    case kPose: {
      delete type_.pose_;
      break;
    }
    case kSpeed: {
      delete type_.speed_;
      break;
    }
    case kPidSpeedLeft: {
      delete type_.pidspeedleft_;
      break;
    }
    case kPidSpeedRight: {
      delete type_.pidspeedright_;
      break;
    }
    case kIsStarterSet: {
      // No need to clear
      break;
    }
    case kStatus: {
      delete type_.status_;
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void SerialResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:snd_msgs.SerialResponse)
  clear_type();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SerialResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:snd_msgs.SerialResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .snd_msgs.Log log = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_log()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .snd_msgs.Encoders encoders = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_encoders()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .snd_msgs.Pose pose = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .snd_msgs.Speed speed = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_speed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .snd_msgs.PidTunings pidSpeedLeft = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pidspeedleft()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .snd_msgs.PidTunings pidSpeedRight = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pidspeedright()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool isStarterSet = 7;
      case 7: {
        if (tag == 56u) {
          clear_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &type_.isstarterset_)));
          set_has_isstarterset();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .snd_msgs.Status status = 8;
      case 8: {
        if (tag == 66u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:snd_msgs.SerialResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:snd_msgs.SerialResponse)
  return false;
#undef DO_
}

void SerialResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:snd_msgs.SerialResponse)
  switch (type_case()) {
    case kLog:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, *type_.log_, output);
      break;
    case kEncoders:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, *type_.encoders_, output);
      break;
    case kPose:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, *type_.pose_, output);
      break;
    case kSpeed:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        4, *type_.speed_, output);
      break;
    case kPidSpeedLeft:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        5, *type_.pidspeedleft_, output);
      break;
    case kPidSpeedRight:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        6, *type_.pidspeedright_, output);
      break;
    case kIsStarterSet:
      ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->isstarterset(), output);
      break;
    case kStatus:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        8, *type_.status_, output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:snd_msgs.SerialResponse)
}

::google::protobuf::uint8* SerialResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:snd_msgs.SerialResponse)
  switch (type_case()) {
    case kLog:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          1, *type_.log_, false, target);
      break;
    case kEncoders:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          2, *type_.encoders_, false, target);
      break;
    case kPose:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          3, *type_.pose_, false, target);
      break;
    case kSpeed:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          4, *type_.speed_, false, target);
      break;
    case kPidSpeedLeft:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          5, *type_.pidspeedleft_, false, target);
      break;
    case kPidSpeedRight:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          6, *type_.pidspeedright_, false, target);
      break;
    case kIsStarterSet:
      target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->isstarterset(), target);
      break;
    case kStatus:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          8, *type_.status_, false, target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snd_msgs.SerialResponse)
  return target;
}

size_t SerialResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snd_msgs.SerialResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  switch (type_case()) {
    // optional .snd_msgs.Log log = 1;
    case kLog: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.log_);
      break;
    }
    // optional .snd_msgs.Encoders encoders = 2;
    case kEncoders: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.encoders_);
      break;
    }
    // optional .snd_msgs.Pose pose = 3;
    case kPose: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.pose_);
      break;
    }
    // optional .snd_msgs.Speed speed = 4;
    case kSpeed: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.speed_);
      break;
    }
    // optional .snd_msgs.PidTunings pidSpeedLeft = 5;
    case kPidSpeedLeft: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.pidspeedleft_);
      break;
    }
    // optional .snd_msgs.PidTunings pidSpeedRight = 6;
    case kPidSpeedRight: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.pidspeedright_);
      break;
    }
    // optional bool isStarterSet = 7;
    case kIsStarterSet: {
      total_size += 1 + 1;
      break;
    }
    // optional .snd_msgs.Status status = 8;
    case kStatus: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.status_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SerialResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:snd_msgs.SerialResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SerialResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SerialResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:snd_msgs.SerialResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:snd_msgs.SerialResponse)
    MergeFrom(*source);
  }
}

void SerialResponse::MergeFrom(const SerialResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:snd_msgs.SerialResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  switch (from.type_case()) {
    case kLog: {
      mutable_log()->::snd_msgs::Log::MergeFrom(from.log());
      break;
    }
    case kEncoders: {
      mutable_encoders()->::snd_msgs::Encoders::MergeFrom(from.encoders());
      break;
    }
    case kPose: {
      mutable_pose()->::snd_msgs::Pose::MergeFrom(from.pose());
      break;
    }
    case kSpeed: {
      mutable_speed()->::snd_msgs::Speed::MergeFrom(from.speed());
      break;
    }
    case kPidSpeedLeft: {
      mutable_pidspeedleft()->::snd_msgs::PidTunings::MergeFrom(from.pidspeedleft());
      break;
    }
    case kPidSpeedRight: {
      mutable_pidspeedright()->::snd_msgs::PidTunings::MergeFrom(from.pidspeedright());
      break;
    }
    case kIsStarterSet: {
      set_isstarterset(from.isstarterset());
      break;
    }
    case kStatus: {
      mutable_status()->::snd_msgs::Status::MergeFrom(from.status());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
}

void SerialResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:snd_msgs.SerialResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SerialResponse::CopyFrom(const SerialResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snd_msgs.SerialResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SerialResponse::IsInitialized() const {
  switch (type_case()) {
    case kLog: {
      if (has_log()) {
        if (!this->log().IsInitialized()) return false;
      }
      break;
    }
    case kEncoders: {
      if (has_encoders()) {
        if (!this->encoders().IsInitialized()) return false;
      }
      break;
    }
    case kPose: {
      if (has_pose()) {
        if (!this->pose().IsInitialized()) return false;
      }
      break;
    }
    case kSpeed: {
      if (has_speed()) {
        if (!this->speed().IsInitialized()) return false;
      }
      break;
    }
    case kPidSpeedLeft: {
      if (has_pidspeedleft()) {
        if (!this->pidspeedleft().IsInitialized()) return false;
      }
      break;
    }
    case kPidSpeedRight: {
      if (has_pidspeedright()) {
        if (!this->pidspeedright().IsInitialized()) return false;
      }
      break;
    }
    case kIsStarterSet: {
      break;
    }
    case kStatus: {
      if (has_status()) {
        if (!this->status().IsInitialized()) return false;
      }
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  return true;
}

void SerialResponse::Swap(SerialResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SerialResponse::InternalSwap(SerialResponse* other) {
  std::swap(type_, other->type_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SerialResponse::GetMetadata() const {
  protobuf_CommMsgs_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_CommMsgs_2eproto::file_level_metadata[10];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SerialResponse

// optional .snd_msgs.Log log = 1;
bool SerialResponse::has_log() const {
  return type_case() == kLog;
}
void SerialResponse::set_has_log() {
  _oneof_case_[0] = kLog;
}
void SerialResponse::clear_log() {
  if (has_log()) {
    delete type_.log_;
    clear_has_type();
  }
}
 const ::snd_msgs::Log& SerialResponse::log() const {
  // @@protoc_insertion_point(field_get:snd_msgs.SerialResponse.log)
  return has_log()
      ? *type_.log_
      : ::snd_msgs::Log::default_instance();
}
::snd_msgs::Log* SerialResponse::mutable_log() {
  if (!has_log()) {
    clear_type();
    set_has_log();
    type_.log_ = new ::snd_msgs::Log;
  }
  // @@protoc_insertion_point(field_mutable:snd_msgs.SerialResponse.log)
  return type_.log_;
}
::snd_msgs::Log* SerialResponse::release_log() {
  // @@protoc_insertion_point(field_release:snd_msgs.SerialResponse.log)
  if (has_log()) {
    clear_has_type();
    ::snd_msgs::Log* temp = type_.log_;
    type_.log_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SerialResponse::set_allocated_log(::snd_msgs::Log* log) {
  clear_type();
  if (log) {
    set_has_log();
    type_.log_ = log;
  }
  // @@protoc_insertion_point(field_set_allocated:snd_msgs.SerialResponse.log)
}

// optional .snd_msgs.Encoders encoders = 2;
bool SerialResponse::has_encoders() const {
  return type_case() == kEncoders;
}
void SerialResponse::set_has_encoders() {
  _oneof_case_[0] = kEncoders;
}
void SerialResponse::clear_encoders() {
  if (has_encoders()) {
    delete type_.encoders_;
    clear_has_type();
  }
}
 const ::snd_msgs::Encoders& SerialResponse::encoders() const {
  // @@protoc_insertion_point(field_get:snd_msgs.SerialResponse.encoders)
  return has_encoders()
      ? *type_.encoders_
      : ::snd_msgs::Encoders::default_instance();
}
::snd_msgs::Encoders* SerialResponse::mutable_encoders() {
  if (!has_encoders()) {
    clear_type();
    set_has_encoders();
    type_.encoders_ = new ::snd_msgs::Encoders;
  }
  // @@protoc_insertion_point(field_mutable:snd_msgs.SerialResponse.encoders)
  return type_.encoders_;
}
::snd_msgs::Encoders* SerialResponse::release_encoders() {
  // @@protoc_insertion_point(field_release:snd_msgs.SerialResponse.encoders)
  if (has_encoders()) {
    clear_has_type();
    ::snd_msgs::Encoders* temp = type_.encoders_;
    type_.encoders_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SerialResponse::set_allocated_encoders(::snd_msgs::Encoders* encoders) {
  clear_type();
  if (encoders) {
    set_has_encoders();
    type_.encoders_ = encoders;
  }
  // @@protoc_insertion_point(field_set_allocated:snd_msgs.SerialResponse.encoders)
}

// optional .snd_msgs.Pose pose = 3;
bool SerialResponse::has_pose() const {
  return type_case() == kPose;
}
void SerialResponse::set_has_pose() {
  _oneof_case_[0] = kPose;
}
void SerialResponse::clear_pose() {
  if (has_pose()) {
    delete type_.pose_;
    clear_has_type();
  }
}
 const ::snd_msgs::Pose& SerialResponse::pose() const {
  // @@protoc_insertion_point(field_get:snd_msgs.SerialResponse.pose)
  return has_pose()
      ? *type_.pose_
      : ::snd_msgs::Pose::default_instance();
}
::snd_msgs::Pose* SerialResponse::mutable_pose() {
  if (!has_pose()) {
    clear_type();
    set_has_pose();
    type_.pose_ = new ::snd_msgs::Pose;
  }
  // @@protoc_insertion_point(field_mutable:snd_msgs.SerialResponse.pose)
  return type_.pose_;
}
::snd_msgs::Pose* SerialResponse::release_pose() {
  // @@protoc_insertion_point(field_release:snd_msgs.SerialResponse.pose)
  if (has_pose()) {
    clear_has_type();
    ::snd_msgs::Pose* temp = type_.pose_;
    type_.pose_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SerialResponse::set_allocated_pose(::snd_msgs::Pose* pose) {
  clear_type();
  if (pose) {
    set_has_pose();
    type_.pose_ = pose;
  }
  // @@protoc_insertion_point(field_set_allocated:snd_msgs.SerialResponse.pose)
}

// optional .snd_msgs.Speed speed = 4;
bool SerialResponse::has_speed() const {
  return type_case() == kSpeed;
}
void SerialResponse::set_has_speed() {
  _oneof_case_[0] = kSpeed;
}
void SerialResponse::clear_speed() {
  if (has_speed()) {
    delete type_.speed_;
    clear_has_type();
  }
}
 const ::snd_msgs::Speed& SerialResponse::speed() const {
  // @@protoc_insertion_point(field_get:snd_msgs.SerialResponse.speed)
  return has_speed()
      ? *type_.speed_
      : ::snd_msgs::Speed::default_instance();
}
::snd_msgs::Speed* SerialResponse::mutable_speed() {
  if (!has_speed()) {
    clear_type();
    set_has_speed();
    type_.speed_ = new ::snd_msgs::Speed;
  }
  // @@protoc_insertion_point(field_mutable:snd_msgs.SerialResponse.speed)
  return type_.speed_;
}
::snd_msgs::Speed* SerialResponse::release_speed() {
  // @@protoc_insertion_point(field_release:snd_msgs.SerialResponse.speed)
  if (has_speed()) {
    clear_has_type();
    ::snd_msgs::Speed* temp = type_.speed_;
    type_.speed_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SerialResponse::set_allocated_speed(::snd_msgs::Speed* speed) {
  clear_type();
  if (speed) {
    set_has_speed();
    type_.speed_ = speed;
  }
  // @@protoc_insertion_point(field_set_allocated:snd_msgs.SerialResponse.speed)
}

// optional .snd_msgs.PidTunings pidSpeedLeft = 5;
bool SerialResponse::has_pidspeedleft() const {
  return type_case() == kPidSpeedLeft;
}
void SerialResponse::set_has_pidspeedleft() {
  _oneof_case_[0] = kPidSpeedLeft;
}
void SerialResponse::clear_pidspeedleft() {
  if (has_pidspeedleft()) {
    delete type_.pidspeedleft_;
    clear_has_type();
  }
}
 const ::snd_msgs::PidTunings& SerialResponse::pidspeedleft() const {
  // @@protoc_insertion_point(field_get:snd_msgs.SerialResponse.pidSpeedLeft)
  return has_pidspeedleft()
      ? *type_.pidspeedleft_
      : ::snd_msgs::PidTunings::default_instance();
}
::snd_msgs::PidTunings* SerialResponse::mutable_pidspeedleft() {
  if (!has_pidspeedleft()) {
    clear_type();
    set_has_pidspeedleft();
    type_.pidspeedleft_ = new ::snd_msgs::PidTunings;
  }
  // @@protoc_insertion_point(field_mutable:snd_msgs.SerialResponse.pidSpeedLeft)
  return type_.pidspeedleft_;
}
::snd_msgs::PidTunings* SerialResponse::release_pidspeedleft() {
  // @@protoc_insertion_point(field_release:snd_msgs.SerialResponse.pidSpeedLeft)
  if (has_pidspeedleft()) {
    clear_has_type();
    ::snd_msgs::PidTunings* temp = type_.pidspeedleft_;
    type_.pidspeedleft_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SerialResponse::set_allocated_pidspeedleft(::snd_msgs::PidTunings* pidspeedleft) {
  clear_type();
  if (pidspeedleft) {
    set_has_pidspeedleft();
    type_.pidspeedleft_ = pidspeedleft;
  }
  // @@protoc_insertion_point(field_set_allocated:snd_msgs.SerialResponse.pidSpeedLeft)
}

// optional .snd_msgs.PidTunings pidSpeedRight = 6;
bool SerialResponse::has_pidspeedright() const {
  return type_case() == kPidSpeedRight;
}
void SerialResponse::set_has_pidspeedright() {
  _oneof_case_[0] = kPidSpeedRight;
}
void SerialResponse::clear_pidspeedright() {
  if (has_pidspeedright()) {
    delete type_.pidspeedright_;
    clear_has_type();
  }
}
 const ::snd_msgs::PidTunings& SerialResponse::pidspeedright() const {
  // @@protoc_insertion_point(field_get:snd_msgs.SerialResponse.pidSpeedRight)
  return has_pidspeedright()
      ? *type_.pidspeedright_
      : ::snd_msgs::PidTunings::default_instance();
}
::snd_msgs::PidTunings* SerialResponse::mutable_pidspeedright() {
  if (!has_pidspeedright()) {
    clear_type();
    set_has_pidspeedright();
    type_.pidspeedright_ = new ::snd_msgs::PidTunings;
  }
  // @@protoc_insertion_point(field_mutable:snd_msgs.SerialResponse.pidSpeedRight)
  return type_.pidspeedright_;
}
::snd_msgs::PidTunings* SerialResponse::release_pidspeedright() {
  // @@protoc_insertion_point(field_release:snd_msgs.SerialResponse.pidSpeedRight)
  if (has_pidspeedright()) {
    clear_has_type();
    ::snd_msgs::PidTunings* temp = type_.pidspeedright_;
    type_.pidspeedright_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SerialResponse::set_allocated_pidspeedright(::snd_msgs::PidTunings* pidspeedright) {
  clear_type();
  if (pidspeedright) {
    set_has_pidspeedright();
    type_.pidspeedright_ = pidspeedright;
  }
  // @@protoc_insertion_point(field_set_allocated:snd_msgs.SerialResponse.pidSpeedRight)
}

// optional bool isStarterSet = 7;
bool SerialResponse::has_isstarterset() const {
  return type_case() == kIsStarterSet;
}
void SerialResponse::set_has_isstarterset() {
  _oneof_case_[0] = kIsStarterSet;
}
void SerialResponse::clear_isstarterset() {
  if (has_isstarterset()) {
    type_.isstarterset_ = false;
    clear_has_type();
  }
}
bool SerialResponse::isstarterset() const {
  // @@protoc_insertion_point(field_get:snd_msgs.SerialResponse.isStarterSet)
  if (has_isstarterset()) {
    return type_.isstarterset_;
  }
  return false;
}
void SerialResponse::set_isstarterset(bool value) {
  if (!has_isstarterset()) {
    clear_type();
    set_has_isstarterset();
  }
  type_.isstarterset_ = value;
  // @@protoc_insertion_point(field_set:snd_msgs.SerialResponse.isStarterSet)
}

// optional .snd_msgs.Status status = 8;
bool SerialResponse::has_status() const {
  return type_case() == kStatus;
}
void SerialResponse::set_has_status() {
  _oneof_case_[0] = kStatus;
}
void SerialResponse::clear_status() {
  if (has_status()) {
    delete type_.status_;
    clear_has_type();
  }
}
 const ::snd_msgs::Status& SerialResponse::status() const {
  // @@protoc_insertion_point(field_get:snd_msgs.SerialResponse.status)
  return has_status()
      ? *type_.status_
      : ::snd_msgs::Status::default_instance();
}
::snd_msgs::Status* SerialResponse::mutable_status() {
  if (!has_status()) {
    clear_type();
    set_has_status();
    type_.status_ = new ::snd_msgs::Status;
  }
  // @@protoc_insertion_point(field_mutable:snd_msgs.SerialResponse.status)
  return type_.status_;
}
::snd_msgs::Status* SerialResponse::release_status() {
  // @@protoc_insertion_point(field_release:snd_msgs.SerialResponse.status)
  if (has_status()) {
    clear_has_type();
    ::snd_msgs::Status* temp = type_.status_;
    type_.status_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void SerialResponse::set_allocated_status(::snd_msgs::Status* status) {
  clear_type();
  if (status) {
    set_has_status();
    type_.status_ = status;
  }
  // @@protoc_insertion_point(field_set_allocated:snd_msgs.SerialResponse.status)
}

bool SerialResponse::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
void SerialResponse::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
SerialResponse::TypeCase SerialResponse::type_case() const {
  return SerialResponse::TypeCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace snd_msgs

// @@protoc_insertion_point(global_scope)
